// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç test/security/EmergencyWithdrawTests.test.js
const { expect } = require("chai");
const { ethers } = require("hardhat");
const { loadFixture } = require("@nomicfoundation/hardhat-network-helpers");

describe("Emergency Withdrawal Edge Cases", function () {
  async function deployWithFundsFixture() {
    const [owner, user1, user2, user3] = await ethers.getSigners();
    
    // Deploy tokens and contract
    const FakeUSDT = await ethers.getContractFactory("FakeUSDT");
    const usdt = await FakeUSDT.deploy();
    await usdt.waitForDeployment();

    const CryptoMembershipNFT = await ethers.getContractFactory("CryptoMembershipNFT");
    const nft = await CryptoMembershipNFT.deploy(await usdt.getAddress(), owner.address);
    await nft.waitForDeployment();

    // *** ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å: ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö decimals ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ ***
    const decimals = await usdt.decimals();
    console.log(`üí∞ USDT decimals: ${decimals}`);
    
    // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ parseUnits ‡πÅ‡∏ó‡∏ô parseEther ***
    const usdtAmount = ethers.parseUnits("100", decimals); // 100 USDT
    
    // *** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á owner ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏≠‡∏ô ***
    const ownerBalance = await usdt.balanceOf(owner.address);
    console.log(`üë§ Owner initial balance: ${ethers.formatUnits(ownerBalance, decimals)} USDT`);
    
    // *** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ***
    const totalNeeded = usdtAmount * BigInt([user1, user2, user3].length);
    if (ownerBalance < totalNeeded) {
      throw new Error(`Insufficient balance. Owner has ${ethers.formatUnits(ownerBalance, decimals)} USDT, but needs ${ethers.formatUnits(totalNeeded, decimals)} USDT`);
    }

    // Setup funds by registering users
    for (const user of [user1, user2, user3]) {
      await usdt.transfer(user.address, usdtAmount);
      await usdt.connect(user).approve(await nft.getAddress(), usdtAmount);
      
      // *** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö balance ‡∏´‡∏•‡∏±‡∏á transfer ***
      const userBalance = await usdt.balanceOf(user.address);
      console.log(`üë§ ${user.address.slice(0, 8)}... balance: ${ethers.formatUnits(userBalance, decimals)} USDT`);
    }
    
    console.log("üèóÔ∏è ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...");

    // Register users with delays to avoid TooSoon errors
    await nft.connect(user1).registerMember(1, owner.address);
    console.log("‚úÖ User1 registered");

    await ethers.provider.send("evm_increaseTime", [90]);
    await ethers.provider.send("evm_mine");

    await nft.connect(user2).registerMember(1, user1.address);
    console.log("‚úÖ User2 registered");
    
    // *** ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ***
    const systemStats = await nft.getSystemStats();
    console.log("üìä System stats after registration:");
    console.log(`   Total Members: ${systemStats[0]}`);
    console.log(`   Owner Funds: ${ethers.formatUnits(systemStats[3], decimals)} USDT`);
    console.log(`   Fee Funds: ${ethers.formatUnits(systemStats[4], decimals)} USDT`);
    console.log(`   Fund Balance: ${ethers.formatUnits(systemStats[5], decimals)} USDT`);

    return { nft, usdt, owner, user1, user2, user3, decimals };
  }

  it("Should handle emergency withdrawal when contractBalance < expectedBalance", async function () {
    const { nft, usdt, owner, decimals } = await loadFixture(deployWithFundsFixture);
    
    console.log("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Emergency Withdrawal ‡πÄ‡∏°‡∏∑‡πà‡∏≠ contractBalance < expectedBalance");
    
    // Get current balances
    const systemStats = await nft.getSystemStats();
    const expectedBalance = systemStats[3] + systemStats[4] + systemStats[5];
    const contractBalanceBefore = await usdt.balanceOf(await nft.getAddress());
    
    console.log(`üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤:`);
    console.log(`   Expected Balance: ${ethers.formatUnits(expectedBalance, decimals)} USDT`);
    console.log(`   Contract Balance: ${ethers.formatUnits(contractBalanceBefore, decimals)} USDT`);
    
    // *** ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ transfer ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ***
    // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ manipulate contract balance ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏î‡πâ
    
    // ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å contract ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    const ownerFunds = systemStats[3];
    if (ownerFunds > 0n) {
      const withdrawAmount = ownerFunds / 2n; // ‡∏ñ‡∏≠‡∏ô‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á
      await nft.connect(owner).withdrawOwnerBalance(withdrawAmount);
      console.log(`üí∏ ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ${ethers.formatUnits(withdrawAmount, decimals)} USDT ‡∏à‡∏≤‡∏Å owner funds`);
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô
    const systemStatsAfter = await nft.getSystemStats();
    const contractBalanceAfter = await usdt.balanceOf(await nft.getAddress());
    const expectedBalanceAfter = systemStatsAfter[3] + systemStatsAfter[4] + systemStatsAfter[5];
    
    console.log(`üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô:`);
    console.log(`   Expected Balance: ${ethers.formatUnits(expectedBalanceAfter, decimals)} USDT`);
    console.log(`   Contract Balance: ${ethers.formatUnits(contractBalanceAfter, decimals)} USDT`);
    
    // Request emergency withdrawal
    console.log("üìã ‡∏Ç‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô...");
    await nft.connect(owner).requestEmergencyWithdraw();

    // Wait for timelock to expire
    console.log("‚è∞ ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ timelock 2 ‡∏ß‡∏±‡∏ô...");
    await ethers.provider.send("evm_increaseTime", [2 * 24 * 60 * 60 + 1]);
    await ethers.provider.send("evm_mine");

    // Perform emergency withdrawal
    const ownerBalanceBefore = await usdt.balanceOf(owner.address);
    console.log(`üíº Owner balance before emergency withdrawal: ${ethers.formatUnits(ownerBalanceBefore, decimals)} USDT`);
    
    console.log("üö® ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô...");
    const emergencyTx = await nft.connect(owner).emergencyWithdraw();
    await emergencyTx.wait();
    
    const ownerBalanceAfter = await usdt.balanceOf(owner.address);
    const withdrawnAmount = ownerBalanceAfter - ownerBalanceBefore;
    
    console.log(`üíº Owner balance after emergency withdrawal: ${ethers.formatUnits(ownerBalanceAfter, decimals)} USDT`);
    console.log(`üí∞ Withdrawn amount: ${ethers.formatUnits(withdrawnAmount, decimals)} USDT`);

    // Verify that emergency withdrawal worked
    expect(withdrawnAmount).to.be.gt(0, "Emergency withdrawal should transfer some funds");

    // Verify that all balances were reset
    const statsAfterEmergency = await nft.getSystemStats();
    expect(statsAfterEmergency[3]).to.equal(0); // ownerFunds
    expect(statsAfterEmergency[4]).to.equal(0); // feeFunds
    expect(statsAfterEmergency[5]).to.equal(0); // fundFunds
    
    console.log("‚úÖ Emergency withdrawal completed successfully");
  });

  it("Should handle emergency withdrawal cancellation scenarios", async function() {
    const { nft, owner } = await loadFixture(deployWithFundsFixture);
    
    console.log("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Emergency Withdrawal");
    
    // Request emergency withdrawal
    console.log("üìã ‡∏Ç‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô...");
    await nft.connect(owner).requestEmergencyWithdraw();
    
    // Verify request is active
    let contractStatus = await nft.getContractStatus();
    expect(contractStatus[4]).to.equal(true); // hasEmergencyRequest
    console.log("‚úÖ Emergency request activated");
    
    // Cancel request
    console.log("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô...");
    await nft.connect(owner).cancelEmergencyWithdraw();
    
    // Verify request is cancelled
    contractStatus = await nft.getContractStatus();
    expect(contractStatus[4]).to.equal(false); // hasEmergencyRequest
    console.log("‚úÖ Emergency request cancelled");
    
    // Attempt withdrawal should fail
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (‡∏Ñ‡∏ß‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)...");
    await expect(
      nft.connect(owner).emergencyWithdraw()
    ).to.be.revertedWithCustomError(nft, "NoRequest");
    console.log("‚úÖ Emergency withdrawal correctly rejected");
    
    // Request again
    console.log("üìã ‡∏Ç‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á...");
    await nft.connect(owner).requestEmergencyWithdraw();
    
    // Wait for half the timelock duration
    console.log("‚è∞ ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á timelock (1 ‡∏ß‡∏±‡∏ô)...");
    await ethers.provider.send("evm_increaseTime", [1 * 24 * 60 * 60]);
    await ethers.provider.send("evm_mine");
    
    // Attempt withdrawal should fail due to timelock
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö timelock (‡∏Ñ‡∏ß‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)...");
    await expect(
      nft.connect(owner).emergencyWithdraw()
    ).to.be.revertedWithCustomError(nft, "TimelockActive");
    console.log("‚úÖ Timelock correctly enforced");
    
    // Cancel again
    console.log("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á...");
    await nft.connect(owner).cancelEmergencyWithdraw();
    
    // Wait for full timelock duration
    console.log("‚è∞ ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ timelock ‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (2 ‡∏ß‡∏±‡∏ô)...");
    await ethers.provider.send("evm_increaseTime", [2 * 24 * 60 * 60]);
    await ethers.provider.send("evm_mine");
    
    // Attempt withdrawal should still fail due to cancelled request
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß (‡∏Ñ‡∏ß‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)...");
    await expect(
      nft.connect(owner).emergencyWithdraw()
    ).to.be.revertedWithCustomError(nft, "NoRequest");
    console.log("‚úÖ Cancelled request correctly prevents withdrawal");
    
    console.log("üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Emergency Withdrawal Cancellation ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
  });
  
  it("Should handle multiple emergency withdrawal requests", async function() {
    const { nft, owner } = await loadFixture(deployWithFundsFixture);
    
    console.log("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Multiple Emergency Withdrawal Requests");
    
    // First request
    console.log("üìã ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà 1...");
    await nft.connect(owner).requestEmergencyWithdraw();
    
    let contractStatus = await nft.getContractStatus();
    expect(contractStatus[4]).to.equal(true);
    
    // Try to request again (should not revert, just update timestamp)
    console.log("üìã ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà 2 (‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó timestamp)...");
    await nft.connect(owner).requestEmergencyWithdraw();
    
    contractStatus = await nft.getContractStatus();
    expect(contractStatus[4]).to.equal(true);
    
    // Cancel and verify
    console.log("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠...");
    await nft.connect(owner).cancelEmergencyWithdraw();
    
    contractStatus = await nft.getContractStatus();
    expect(contractStatus[4]).to.equal(false);
    
    console.log("‚úÖ Multiple requests handled correctly");
  });
  
  it("Should show correct emergency time remaining", async function() {
    const { nft, owner } = await loadFixture(deployWithFundsFixture);
    
    console.log("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠");
    
    // Request emergency withdrawal
    await nft.connect(owner).requestEmergencyWithdraw();
    
    // Check time remaining immediately
    let contractStatus = await nft.getContractStatus();
    let timeRemaining = contractStatus[5];
    
    console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ: ${timeRemaining.toString()} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
    expect(timeRemaining).to.be.gt(0);
    expect(timeRemaining).to.be.lte(2 * 24 * 60 * 60); // ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ß‡∏±‡∏ô
    
    // Wait some time
    await ethers.provider.send("evm_increaseTime", [60 * 60]); // 1 hour
    await ethers.provider.send("evm_mine");
    
    // Check time remaining after 1 hour
    contractStatus = await nft.getContractStatus();
    let newTimeRemaining = contractStatus[5];
    
    console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á: ${newTimeRemaining.toString()} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
    expect(newTimeRemaining).to.be.lt(timeRemaining); // ‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏•‡∏á
    
    console.log("‚úÖ Time remaining calculation correct");
  });
});