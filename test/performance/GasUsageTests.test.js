// test/performance/GasUsageTests.test.js
const { expect } = require("chai");
const { ethers } = require("hardhat");
const { loadFixture } = require("@nomicfoundation/hardhat-network-helpers");

describe("Gas Usage Optimization", function () {
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
  this.timeout(120000); // 2 ‡∏ô‡∏≤‡∏ó‡∏µ

  async function deployWithMembersFixture() {
    const [owner, ...signers] = await ethers.getSigners();
    const users = signers.slice(0, 5); // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ 5 ‡∏Ñ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    
    // Deploy FakeUSDT
    const FakeUSDT = await ethers.getContractFactory("FakeUSDT");
    const usdt = await FakeUSDT.deploy();
    await usdt.waitForDeployment();
    
    // Deploy CryptoMembershipNFT - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á contract address
    const CryptoMembershipNFT = await ethers.getContractFactory("CryptoMembershipNFT");
    const nft = await CryptoMembershipNFT.deploy(await usdt.getAddress(), owner.address);
    await nft.waitForDeployment();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö decimals ‡∏Ç‡∏≠‡∏á USDT
    const decimals = await usdt.decimals();
    console.log(`üí∞ USDT decimals: ${decimals}`);
    
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡πÉ‡∏ä‡πâ decimals ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const initialAmount = ethers.parseUnits("100", decimals);
    
    // ‡πÅ‡∏à‡∏Å‡∏à‡πà‡∏≤‡∏¢ USDT ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ contract ‡πÉ‡∏ä‡πâ
    for (const user of users) {
      await usdt.transfer(user.address, initialAmount);
      await usdt.connect(user).approve(await nft.getAddress(), initialAmount);
    }
    
    console.log("üèóÔ∏è ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...");
    
    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ 3 ‡∏Ñ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á 3 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (owner, fee, fund)
    for (let i = 0; i < 3; i++) {
      const upline = i === 0 ? owner.address : users[i-1].address;
      
      // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á TooSoon error
      if (i > 0) {
        console.log(`‚è∞ ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ 90 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ...`);
        await ethers.provider.send("evm_increaseTime", [90]);
        await ethers.provider.send("evm_mine");
      }
      
      console.log(`üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà ${i+1} (upline: ${upline.slice(0, 8)}...)`);
      
      try {
        const tx = await nft.connect(users[i]).registerMember(1, upline);
        await tx.wait();
        console.log(`‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
      } catch (error) {
        console.error(`‚ùå ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:`, error.message);
        throw error;
      }
    }
    
    return { nft, usdt, owner, users, decimals };
  }
  
  it("Should optimize gas usage for batch operations", async function() {
    const { nft, usdt, owner, users, decimals } = await loadFixture(deployWithMembersFixture);
    
    console.log("üìä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Gas Usage Optimization...");
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô
    const systemStats = await nft.getSystemStats();
    const ownerBalance = systemStats[3]; // ownerFunds
    const feeBalance = systemStats[4]; // feeFunds
    const fundBalance = systemStats[5]; // fundFunds
    
    console.log(`üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:`);
    console.log(`   Owner: ${ethers.formatUnits(ownerBalance, decimals)} USDT`);
    console.log(`   Fee: ${ethers.formatUnits(feeBalance, decimals)} USDT`);
    console.log(`   Fund: ${ethers.formatUnits(fundBalance, decimals)} USDT`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    expect(ownerBalance).to.be.gt(0, "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô Owner ‡∏Ñ‡∏ß‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");
    expect(feeBalance).to.be.gt(0, "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô Fee ‡∏Ñ‡∏ß‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");
    expect(fundBalance).to.be.gt(0, "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô Fund ‡∏Ñ‡∏ß‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏≠‡∏ô (‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó)
    const ownerWithdraw = ownerBalance / 2n;
    const feeWithdraw = feeBalance / 2n;
    const fundWithdraw = fundBalance / 2n;
    
    console.log(`üìù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏≠‡∏ô:`);
    console.log(`   Owner: ${ethers.formatUnits(ownerWithdraw, decimals)} USDT`);
    console.log(`   Fee: ${ethers.formatUnits(feeWithdraw, decimals)} USDT`);
    console.log(`   Fund: ${ethers.formatUnits(fundWithdraw, decimals)} USDT`);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á withdrawal requests ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö batch withdrawal
    const withdrawalRequests = [
      {
        recipient: owner.address,
        amount: ownerWithdraw,
        balanceType: 0 // owner
      },
      {
        recipient: users[0].address,
        amount: feeWithdraw,
        balanceType: 1 // fee
      },
      {
        recipient: users[1].address,
        amount: fundWithdraw,
        balanceType: 2 // fund
      }
    ];
    
    console.log("‚ö° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° (Batch Withdrawal)...");
    
    // ‡∏ß‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ gas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°
    const batchTx = await nft.connect(owner).batchWithdraw(withdrawalRequests);
    const batchReceipt = await batchTx.wait();
    const batchGasUsed = batchReceipt.gasUsed;
    
    console.log(`‚ö° Gas ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Batch Withdrawal: ${batchGasUsed.toString()}`);
    
    // Deploy ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å transaction
    console.log("üîÑ Deploy contract ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å transaction...");
    const { nft: nft2, usdt: usdt2, owner: owner2, users: users2, decimals: decimals2 } = await loadFixture(deployWithMembersFixture);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
    const systemStats2 = await nft2.getSystemStats();
    const ownerBalance2 = systemStats2[3]; // ownerFunds
    const feeBalance2 = systemStats2[4]; // feeFunds
    const fundBalance2 = systemStats2[5]; // fundFunds
    
    console.log("‚ö° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å transaction...");
    
    // ‡∏ß‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ gas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å transaction
    let individualGasUsed = 0n;
    
    // ‡∏ñ‡∏≠‡∏ô‡∏¢‡∏≠‡∏î Owner
    console.log("üíº ‡∏ñ‡∏≠‡∏ô‡∏¢‡∏≠‡∏î Owner...");
    const tx1 = await nft2.connect(owner2).withdrawOwnerBalance(ownerBalance2 / 2n);
    const receipt1 = await tx1.wait();
    individualGasUsed += receipt1.gasUsed;
    console.log(`   Gas: ${receipt1.gasUsed.toString()}`);
    
    // ‡∏ñ‡∏≠‡∏ô‡∏¢‡∏≠‡∏î Fee
    console.log("üíº ‡∏ñ‡∏≠‡∏ô‡∏¢‡∏≠‡∏î Fee...");
    const tx2 = await nft2.connect(owner2).withdrawFeeSystemBalance(feeBalance2 / 2n);
    const receipt2 = await tx2.wait();
    individualGasUsed += receipt2.gasUsed;
    console.log(`   Gas: ${receipt2.gasUsed.toString()}`);
    
    // ‡∏ñ‡∏≠‡∏ô‡∏¢‡∏≠‡∏î Fund
    console.log("üíº ‡∏ñ‡∏≠‡∏ô‡∏¢‡∏≠‡∏î Fund...");
    const tx3 = await nft2.connect(owner2).withdrawFundBalance(fundBalance2 / 2n);
    const receipt3 = await tx3.wait();
    individualGasUsed += receipt3.gasUsed;
    console.log(`   Gas: ${receipt3.gasUsed.toString()}`);
    
    console.log(`‚ö° Gas ‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Individual Withdrawals: ${individualGasUsed.toString()}`);
    
    // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ gas
    const gasSaved = individualGasUsed - batchGasUsed;
    const percentSaved = (Number(gasSaved) / Number(individualGasUsed)) * 100;
    
    console.log(`\nüìà ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Gas Usage:`);
    console.log(`   Batch Withdrawal: ${batchGasUsed.toString()} gas`);
    console.log(`   Individual Withdrawals: ${individualGasUsed.toString()} gas`);
    console.log(`   Gas Saved: ${gasSaved.toString()} gas`);
    console.log(`   Percentage Saved: ${percentSaved.toFixed(2)}%`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏ä‡πâ gas ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤
    expect(batchGasUsed).to.be.lt(individualGasUsed, "‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ Gas ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å transaction");
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î gas ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10%
    expect(percentSaved).to.be.gt(10, "‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î gas ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10%");
    
    console.log("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Gas Usage Optimization ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
  });
  
  it("Should demonstrate gas efficiency in member registration", async function() {
    const { nft, usdt, owner, users, decimals } = await loadFixture(deployWithMembersFixture);
    
    console.log("‚ö° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Gas Efficiency ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å...");
    
    // ‡∏ß‡∏±‡∏î gas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
    const newUserIndex = 3; // ‡πÉ‡∏ä‡πâ user ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    
    console.log("üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏î gas...");
    
    const registrationTx = await nft.connect(users[newUserIndex]).registerMember(1, owner.address);
    const registrationReceipt = await registrationTx.wait();
    const registrationGas = registrationReceipt.gasUsed;
    
    console.log(`‚ö° Gas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: ${registrationGas.toString()}`);
    
   // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ - ‡πÄ‡∏û‡∏¥‡πà‡∏° limit ‡πÄ‡∏õ‡πá‡∏ô 550,000 ***
  const maxExpectedGas = 550000n; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 500k ‡πÄ‡∏õ‡πá‡∏ô 550k gas
  expect(registrationGas).to.be.lt(maxExpectedGas, `‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ gas ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ ${maxExpectedGas.toString()}`);
    
    console.log("‚úÖ Gas efficiency test ‡∏ú‡πà‡∏≤‡∏ô!");
    console.log("üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Gas Usage:");
    console.log(`   - ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ä‡πâ ${registrationGas.toString()} gas`);
    console.log(`   - ‡πÄ‡∏õ‡πá‡∏ô ${((Number(registrationGas) / 21000) * 100).toFixed(1)}% ‡∏Ç‡∏≠‡∏á basic transaction (21k gas)`);
      // *** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á ***
  if (registrationGas > 500000n) {
    console.log("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:");
    console.log("   - ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô (mint NFT + update state + commission)");
    console.log("   - Gas usage ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö complex operation");
    console.log("   - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏î state updates ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ packed structs");
  }
  
  console.log("‚úÖ Gas efficiency test ‡∏ú‡πà‡∏≤‡∏ô!");
  });
  
  it("Should handle gas optimization for emergency withdrawal", async function() {
    const { nft, usdt, owner, users, decimals } = await loadFixture(deployWithMembersFixture);
    
    console.log("üö® ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Gas Optimization ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Emergency Withdrawal...");
    
    // ‡∏Ç‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
    console.log("üìã ‡∏Ç‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô...");
    const requestTx = await nft.connect(owner).requestEmergencyWithdraw();
    const requestReceipt = await requestTx.wait();
    const requestGas = requestReceipt.gasUsed;
    
    console.log(`‚ö° Gas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô: ${requestGas.toString()}`);
    
    // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ timelock (2 days)
    console.log("‚è∞ ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ timelock 2 ‡∏ß‡∏±‡∏ô...");
    await ethers.provider.send("evm_increaseTime", [2 * 24 * 60 * 60 + 1]);
    await ethers.provider.send("evm_mine");
    
    // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
    console.log("üí∏ ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô...");
    const withdrawTx = await nft.connect(owner).emergencyWithdraw();
    const withdrawReceipt = await withdrawTx.wait();
    const withdrawGas = withdrawReceipt.gasUsed;
    
    console.log(`‚ö° Gas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô: ${withdrawGas.toString()}`);
    
    const totalEmergencyGas = requestGas + withdrawGas;
    console.log(`‚ö° Gas ‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Emergency Process: ${totalEmergencyGas.toString()}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ gas ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î
    const maxEmergencyGas = 1000000n; // 1M gas
    expect(totalEmergencyGas).to.be.lt(maxEmergencyGas, `Emergency withdrawal ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ gas ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ ${maxEmergencyGas.toString()}`);
    
    console.log("‚úÖ Emergency withdrawal gas optimization test ‡∏ú‡πà‡∏≤‡∏ô!");
  });
});