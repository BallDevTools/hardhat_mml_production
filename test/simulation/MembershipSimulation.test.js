const { expect } = require("chai");
const { ethers } = require("hardhat");
const { loadFixture } = require("@nomicfoundation/hardhat-network-helpers");

describe("Membership Activity Simulation", function () {
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° test environment
  async function deploySimulationFixture() {
    const signers = await ethers.getSigners();
    const [owner, ...users] = signers;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á users ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 50 ‡∏Ñ‡∏ô
    const memberUsers = users.slice(0, 50);

    // Deploy FakeUSDT
    const FakeUSDT = await ethers.getContractFactory("FakeUSDT");
    const usdt = await FakeUSDT.deploy();
    await usdt.waitForDeployment();

    // Deploy CryptoMembershipNFT
    const CryptoMembershipNFT = await ethers.getContractFactory(
      "CryptoMembershipNFT"
    );
    const nft = await CryptoMembershipNFT.deploy(
      await usdt.getAddress(),
      owner.address
    );
    await nft.waitForDeployment();

    // *** ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö decimals ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ ***
    const decimals = await usdt.decimals();
    console.log(`üí∞ USDT decimals: ${decimals}`);

    // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ parseUnits ‡πÅ‡∏ó‡∏ô parseEther ***
    const initialAmount = ethers.parseUnits("1000", decimals); // ‡πÉ‡∏´‡πâ‡πÄ‡∏¢‡∏≠‡∏∞‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö upgrade

    // *** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô owner ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏≠‡∏ô ***
    const ownerBalance = await usdt.balanceOf(owner.address);
    console.log(
      `üë§ Owner balance: ${ethers.formatUnits(ownerBalance, decimals)} USDT`
    );

    // *** ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ***
    const totalNeeded = initialAmount * BigInt(memberUsers.length);
    console.log(
      `üíµ Total needed: ${ethers.formatUnits(totalNeeded, decimals)} USDT`
    );

    if (ownerBalance < totalNeeded) {
      throw new Error(
        `Insufficient balance. Owner has ${ethers.formatUnits(
          ownerBalance,
          decimals
        )} USDT, but needs ${ethers.formatUnits(totalNeeded, decimals)} USDT`
      );
    }

    // ‡πÅ‡∏à‡∏Å USDT ‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    for (const user of memberUsers) {
      await usdt.transfer(user.address, initialAmount);
      await usdt.connect(user).approve(await nft.getAddress(), initialAmount);
    }

    return { nft, usdt, owner, memberUsers, decimals };
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥
  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç test/simulation/MembershipSimulation.test.js

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° test environment
  async function deploySimulationFixture() {
    const signers = await ethers.getSigners();
    const [owner, ...users] = signers;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á users ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 50 ‡∏Ñ‡∏ô
    const memberUsers = users.slice(0, 50);

    // Deploy FakeUSDT
    const FakeUSDT = await ethers.getContractFactory("FakeUSDT");
    const usdt = await FakeUSDT.deploy();
    await usdt.waitForDeployment();

    // Deploy CryptoMembershipNFT
    const CryptoMembershipNFT = await ethers.getContractFactory(
      "CryptoMembershipNFT"
    );
    const nft = await CryptoMembershipNFT.deploy(
      await usdt.getAddress(),
      owner.address
    );
    await nft.waitForDeployment();

    // *** ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö decimals ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ ***
    const decimals = await usdt.decimals();
    console.log(`üí∞ USDT decimals: ${decimals}`);

    // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ parseUnits ‡πÅ‡∏ó‡∏ô parseEther ***
    const initialAmount = ethers.parseUnits("1000", decimals); // ‡πÉ‡∏´‡πâ‡πÄ‡∏¢‡∏≠‡∏∞‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö upgrade

    // *** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô owner ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏≠‡∏ô ***
    const ownerBalance = await usdt.balanceOf(owner.address);
    console.log(
      `üë§ Owner balance: ${ethers.formatUnits(ownerBalance, decimals)} USDT`
    );

    // *** ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ***
    const totalNeeded = initialAmount * BigInt(memberUsers.length);
    console.log(
      `üíµ Total needed: ${ethers.formatUnits(totalNeeded, decimals)} USDT`
    );

    if (ownerBalance < totalNeeded) {
      throw new Error(
        `Insufficient balance. Owner has ${ethers.formatUnits(
          ownerBalance,
          decimals
        )} USDT, but needs ${ethers.formatUnits(totalNeeded, decimals)} USDT`
      );
    }

    // ‡πÅ‡∏à‡∏Å USDT ‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    for (const user of memberUsers) {
      await usdt.transfer(user.address, initialAmount);
      await usdt.connect(user).approve(await nft.getAddress(), initialAmount);
    }

    return { nft, usdt, owner, memberUsers, decimals };
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥
  class MembershipSimulator {
    constructor(nft, usdt, owner, users, decimals) {
      this.nft = nft;
      this.usdt = usdt;
      this.owner = owner;
      this.users = users;
      this.decimals = decimals; // *** ‡πÄ‡∏û‡∏¥‡πà‡∏° decimals ***
      this.registeredMembers = new Set();
      this.memberPlans = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ú‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      this.memberUplines = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö upline ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      this.simulationStats = {
        registrations: 0,
        upgrades: 0,
        exits: 0,
        commissionsPaid: 0,
        cycleCompletions: 0,
        totalRevenue: 0n,
      };
    }

    // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å user ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    getRandomUnregisteredUser() {
      const unregistered = this.users.filter(
        (user) => !this.registeredMembers.has(user.address)
      );
      if (unregistered.length === 0) return null;
      return unregistered[Math.floor(Math.random() * unregistered.length)];
    }

    // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å user ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß
    getRandomRegisteredUser() {
      const registered = Array.from(this.registeredMembers);
      if (registered.length === 0) return null;
      const address = registered[Math.floor(Math.random() * registered.length)];
      return this.users.find((user) => user.address === address);
    }

    // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å upline ‡∏à‡∏≤‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    getRandomUpline() {
      if (this.registeredMembers.size === 0) return this.owner.address;

      // 30% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏•‡∏∑‡∏≠‡∏Å owner ‡πÄ‡∏õ‡πá‡∏ô upline
      if (Math.random() < 0.3) return this.owner.address;

      const members = Array.from(this.registeredMembers);
      const randomAddress = members[Math.floor(Math.random() * members.length)];
      return randomAddress;
    }

    // ‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
    async simulateRegistration() {
      const user = this.getRandomUnregisteredUser();
      if (!user) return false;

      const uplineAddress = this.getRandomUpline();

      try {
        console.log(
          `üìù ${user.address.slice(
            0,
            8
          )}... ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å Plan 1 (Upline: ${uplineAddress.slice(0, 8)}...)`
        );

        await this.nft.connect(user).registerMember(1, uplineAddress);

        this.registeredMembers.add(user.address);
        this.memberPlans.set(user.address, 1);
        this.memberUplines.set(user.address, uplineAddress);
        this.simulationStats.registrations++;

        // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ parseUnits ‡πÅ‡∏ó‡∏ô parseEther ***
        const planPrice = ethers.parseUnits("1", this.decimals);
        this.simulationStats.totalRevenue += planPrice;

        console.log(
          `‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${this.registeredMembers.size})`
        );
        return true;
      } catch (error) {
        console.log(`‚ùå ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
        return false;
      }
    }

    // ‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏ú‡∏ô
    async simulateUpgrade() {
      const user = this.getRandomRegisteredUser();
      if (!user) return false;

      const currentPlan = this.memberPlans.get(user.address);
      if (!currentPlan || currentPlan >= 16) return false; // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ

      const nextPlan = currentPlan + 1;

      try {
        console.log(
          `‚¨ÜÔ∏è ${user.address.slice(
            0,
            8
          )}... ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î Plan ${currentPlan} ‚Üí Plan ${nextPlan}`
        );

        await this.nft.connect(user).upgradePlan(nextPlan);

        this.memberPlans.set(user.address, nextPlan);
        this.simulationStats.upgrades++;

        // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ parseUnits ‡πÅ‡∏ó‡∏ô parseEther ***
        const upgradeCost =
          ethers.parseUnits(nextPlan.toString(), this.decimals) -
          ethers.parseUnits(currentPlan.toString(), this.decimals);
        this.simulationStats.totalRevenue += upgradeCost;

        console.log(`‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (Plan ${nextPlan})`);
        return true;
      } catch (error) {
        console.log(`‚ùå ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
        return false;
      }
    }

    // ‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö (‡∏´‡∏•‡∏±‡∏á 30 ‡∏ß‡∏±‡∏ô)
    async simulateExit() {
      const user = this.getRandomRegisteredUser();
      if (!user) return false;

      try {
        console.log(`üö™ ${user.address.slice(0, 8)}... ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö`);

        await this.nft.connect(user).exitMembership();

        this.registeredMembers.delete(user.address);
        this.memberPlans.delete(user.address);
        this.memberUplines.delete(user.address);
        this.simulationStats.exits++;

        console.log(
          `‚úÖ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${this.registeredMembers.size})`
        );
        return true;
      } catch (error) {
        console.log(
          `‚ùå ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message} (‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 30 ‡∏ß‡∏±‡∏ô)`
        );
        return false;
      }
    }

    // ‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥
    async performRandomAction() {
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥
      const actions = [
        {
          name: "register",
          weight: 50,
          action: () => this.simulateRegistration(),
        },
        { name: "upgrade", weight: 30, action: () => this.simulateUpgrade() },
        { name: "exit", weight: 5, action: () => this.simulateExit() },
        { name: "wait", weight: 15, action: () => this.simulateWait() },
      ];

      // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
      const totalWeight = actions.reduce(
        (sum, action) => sum + action.weight,
        0
      );
      let random = Math.random() * totalWeight;

      for (const action of actions) {
        random -= action.weight;
        if (random <= 0) {
          return await action.action();
        }
      }

      return false;
    }

    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏≠ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô)
    async simulateWait() {
      const waitTime = Math.floor(Math.random() * 300) + 60; // ‡∏£‡∏≠ 1-5 ‡∏ô‡∏≤‡∏ó‡∏µ
      console.log(`‚è∞ ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ ${waitTime} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...`);

      await ethers.provider.send("evm_increaseTime", [waitTime]);
      await ethers.provider.send("evm_mine");

      return true;
    }

    // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö
    async getSystemStats() {
      try {
        const stats = await this.nft.getSystemStats();
        return stats;
      } catch (error) {
        console.log("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ:", error.message);
        return null;
      }
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á
    printSimulationStats() {
      console.log("\n" + "=".repeat(60));
      console.log("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á Membership Activity");
      console.log("=".repeat(60));
      console.log(`üë• ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${this.registeredMembers.size} ‡∏Ñ‡∏ô`);
      console.log(
        `üìù ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: ${this.simulationStats.registrations} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
      );
      console.log(`‚¨ÜÔ∏è ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î: ${this.simulationStats.upgrades} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
      console.log(`üö™ ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö: ${this.simulationStats.exits} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
      console.log(
        `üí∞ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°: ${ethers.formatUnits(
          this.simulationStats.totalRevenue,
          this.decimals
        )} USDT`
      );

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô
      const planDistribution = new Map();
      for (const plan of this.memberPlans.values()) {
        planDistribution.set(plan, (planDistribution.get(plan) || 0) + 1);
      }

      console.log("\nüìà ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô:");
      for (const [plan, count] of planDistribution.entries()) {
        console.log(`   Plan ${plan}: ${count} ‡∏Ñ‡∏ô`);
      }
      console.log("=".repeat(60));
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á
    async printSystemStats() {
      const stats = await this.getSystemStats();
      if (!stats) return;

      console.log("\nüíé ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å Smart Contract:");
      console.log(`   Total Members: ${stats[0]}`);
      console.log(
        `   Total Revenue: ${ethers.formatUnits(stats[1], this.decimals)} USDT`
      );
      console.log(
        `   Total Commission: ${ethers.formatUnits(
          stats[2],
          this.decimals
        )} USDT`
      );
      console.log(
        `   Owner Funds: ${ethers.formatUnits(stats[3], this.decimals)} USDT`
      );
      console.log(
        `   Fee Funds: ${ethers.formatUnits(stats[4], this.decimals)} USDT`
      );
      console.log(
        `   Fund Balance: ${ethers.formatUnits(stats[5], this.decimals)} USDT`
      );
    }
  }

  describe("Random Membership Activity Simulation", function () {
    it("Should simulate random member activities over time", async function () {
      this.timeout(300000); // 5 ‡∏ô‡∏≤‡∏ó‡∏µ timeout

      const { nft, usdt, owner, memberUsers } = await loadFixture(
        deploySimulationFixture
      );
      const simulator = new MembershipSimulator(nft, usdt, owner, memberUsers);

      console.log("\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å...\n");

      const totalActions = 100; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      let successfulActions = 0;

      for (let i = 0; i < totalActions; i++) {
        console.log(`\n--- ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏µ‡πà ${i + 1}/${totalActions} ---`);

        const success = await simulator.performRandomAction();
        if (success) successfulActions++;

        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡πÜ 20 ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥
        if ((i + 1) % 20 === 0) {
          simulator.printSimulationStats();
          await simulator.printSystemStats();
        }
      }

      // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
      console.log("\nüéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢");
      simulator.printSimulationStats();
      await simulator.printSystemStats();

      console.log(
        `\n‚ú® ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successfulActions}/${totalActions} (${(
          (successfulActions / totalActions) *
          100
        ).toFixed(1)}%)`
      );

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 ‡∏Ñ‡∏ô
      expect(simulator.registeredMembers.size).to.be.at.least(10);
    });

    it("Should simulate member upgrade chain scenario", async function () {
      this.timeout(180000); // 3 ‡∏ô‡∏≤‡∏ó‡∏µ timeout

      const { nft, usdt, owner, memberUsers } = await loadFixture(
        deploySimulationFixture
      );
      const simulator = new MembershipSimulator(nft, usdt, owner, memberUsers);

      console.log("\nüîó ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå Upgrade Chain...\n");

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á upgrade chain: user1 ‚Üí user2 ‚Üí user3 ‚Üí user4
      const chainUsers = memberUsers.slice(0, 4);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏ô
      for (let i = 0; i < chainUsers.length; i++) {
        const user = chainUsers[i];
        const upline = i === 0 ? owner.address : chainUsers[i - 1].address;

        await simulator.nft.connect(user).registerMember(1, upline);
        simulator.registeredMembers.add(user.address);
        simulator.memberPlans.set(user.address, 1);

        console.log(
          `üìù ${user.address.slice(0, 8)}... ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (Upline: ${upline.slice(
            0,
            8
          )}...)`
        );

        // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô TooSoon error
        await ethers.provider.send("evm_increaseTime", [70]);
        await ethers.provider.send("evm_mine");
      }

      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
      for (let round = 0; round < 20; round++) {
        console.log(`\n--- ‡∏£‡∏≠‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î ${round + 1} ---`);

        // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö upgrade cooldown
        await ethers.provider.send("evm_increaseTime", [24 * 60 * 60 + 60]); // 1 ‡∏ß‡∏±‡∏ô + 1 ‡∏ô‡∏≤‡∏ó‡∏µ
        await ethers.provider.send("evm_mine");

        // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î
        const userToUpgrade =
          chainUsers[Math.floor(Math.random() * chainUsers.length)];
        const currentPlan =
          simulator.memberPlans.get(userToUpgrade.address) || 1;

        if (currentPlan < 16) {
          try {
            await simulator.nft
              .connect(userToUpgrade)
              .upgradePlan(currentPlan + 1);
            simulator.memberPlans.set(userToUpgrade.address, currentPlan + 1);

            console.log(
              `‚¨ÜÔ∏è ${userToUpgrade.address.slice(
                0,
                8
              )}... ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î Plan ${currentPlan} ‚Üí Plan ${currentPlan + 1}`
            );
          } catch (error) {
            console.log(`‚ùå ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
          }
        }
      }

      // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå chain
      console.log("\nüèÜ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Upgrade Chain:");
      for (let i = 0; i < chainUsers.length; i++) {
        const user = chainUsers[i];
        const plan = simulator.memberPlans.get(user.address);
        const member = await simulator.nft.members(user.address);

        console.log(
          `   User ${i + 1}: Plan ${plan}, Total Referrals: ${
            member.totalReferrals
          }, Total Earnings: ${ethers.formatEther(member.totalEarnings)} USDT`
        );
      }

      await simulator.printSystemStats();
    });

    it("Should simulate cycle completion scenarios", async function () {
      this.timeout(240000); // 4 ‡∏ô‡∏≤‡∏ó‡∏µ timeout

      const { nft, usdt, owner, memberUsers } = await loadFixture(
        deploySimulationFixture
      );

      console.log("\nüîÑ ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö (Cycle Completion)...\n");

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö
      const batchSize = 8; // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏£‡∏≠‡∏ö (4 ‡∏Ñ‡∏ô/‡∏£‡∏≠‡∏ö)

      for (let i = 0; i < batchSize; i++) {
        const user = memberUsers[i];
        const upline = i === 0 ? owner.address : memberUsers[i - 1].address;

        console.log(
          `üìù ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà ${i + 1}: ${user.address.slice(
            0,
            8
          )}... (Upline: ${upline.slice(0, 8)}...)`
        );

        const tx = await nft.connect(user).registerMember(1, upline);
        const receipt = await tx.wait();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ NewCycleStarted event ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const newCycleEvent = receipt.logs.find((log) => {
          try {
            const parsed = nft.interface.parseLog(log);
            return parsed.name === "NewCycleStarted";
          } catch {
            return false;
          }
        });

        if (newCycleEvent) {
          const parsed = nft.interface.parseLog(newCycleEvent);
          console.log(
            `üîÑ ‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô! Plan ${parsed.args[0]}, Cycle ${parsed.args[1]}`
          );
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≠‡∏ö
        const cycleInfo = await nft.getPlanCycleInfo(1);
        console.log(
          `   ‚îî‚îÄ ‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${cycleInfo[0]}, ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏£‡∏≠‡∏ö: ${cycleInfo[1]}/4`
        );

        // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô TooSoon error
        if (i < batchSize - 1) {
          await ethers.provider.send("evm_increaseTime", [70]);
          await ethers.provider.send("evm_mine");
        }
      }

      // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
      const finalCycleInfo = await nft.getPlanCycleInfo(1);
      console.log(`\nüéØ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:`);
      console.log(`   ‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${finalCycleInfo[0]}`);
      console.log(`   ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${finalCycleInfo[1]}/4`);
      console.log(`   ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${await nft.totalSupply()}`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß
      expect(finalCycleInfo[0]).to.be.gt(1n); // ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 2 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
    });

    it("Should simulate mixed activity with time progression", async function () {
      this.timeout(360000); // 6 ‡∏ô‡∏≤‡∏ó‡∏µ timeout

      const { nft, usdt, owner, memberUsers } = await loadFixture(
        deploySimulationFixture
      );
      const simulator = new MembershipSimulator(nft, usdt, owner, memberUsers);

      console.log("\nüé≠ ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤...\n");

      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á 30 ‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
      const totalDays = 30;
      const actionsPerDay = 5;

      for (let day = 1; day <= totalDays; day++) {
        console.log(`\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${day}/${totalDays}`);

        // ‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
        for (let action = 0; action < actionsPerDay; action++) {
          await simulator.performRandomAction();

          // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥
          await ethers.provider.send("evm_increaseTime", [
            Math.floor(Math.random() * 3600) + 1800,
          ]); // 30 ‡∏ô‡∏≤‡∏ó‡∏µ - 1.5 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
          await ethers.provider.send("evm_mine");
        }

        // ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        await ethers.provider.send("evm_increaseTime", [24 * 60 * 60]); // 1 ‡∏ß‡∏±‡∏ô
        await ethers.provider.send("evm_mine");

        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡πÜ 10 ‡∏ß‡∏±‡∏ô
        if (day % 10 === 0) {
          simulator.printSimulationStats();
        }

        // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 30 ‡∏ß‡∏±‡∏ô
        if (day === 30) {
          console.log("\nüö™ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á 30 ‡∏ß‡∏±‡∏ô...");
          for (let i = 0; i < 3; i++) {
            await simulator.simulateExit();
          }
        }
      }

      // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
      console.log("\nüèÅ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á 30 ‡∏ß‡∏±‡∏ô");
      simulator.printSimulationStats();
      await simulator.printSystemStats();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥
      expect(simulator.registeredMembers.size).to.be.gt(0);
    });
  });
});
