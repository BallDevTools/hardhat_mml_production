// test/integration/CommissionPayment.test.js
const { expect } = require("chai");
const { ethers } = require("hardhat");
const { loadFixture } = require("@nomicfoundation/hardhat-network-helpers");

describe("Commission Payment Chain", function () {
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
  this.timeout(120000); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏ô‡∏≤‡∏ó‡∏µ

  async function deployFixture() {
    const [owner, ...signers] = await ethers.getSigners();
    const users = signers.slice(0, 10); // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ 10 ‡∏Ñ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö chain ‡∏ó‡∏µ‡πà‡∏•‡∏∂‡∏Å
    
    // Deploy FakeUSDT
    const FakeUSDT = await ethers.getContractFactory("FakeUSDT");
    const usdt = await FakeUSDT.deploy();
    await usdt.waitForDeployment();
    
    // Deploy CryptoMembershipNFT - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á parameter
    const CryptoMembershipNFT = await ethers.getContractFactory("CryptoMembershipNFT");
    const nft = await CryptoMembershipNFT.deploy(
      await usdt.getAddress(), // ‡πÉ‡∏ä‡πâ getAddress() ‡πÅ‡∏ó‡∏ô target
      owner.address
    );
    await nft.waitForDeployment();
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç decimals
    const initialAmount = ethers.parseUnits("100", 6); // ‡πÉ‡∏ä‡πâ 6 decimals ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö USDT
    
    // ‡πÅ‡∏à‡∏Å‡∏à‡πà‡∏≤‡∏¢ USDT ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ contract ‡πÉ‡∏ä‡πâ
    for (const user of users) {
      await usdt.transfer(user.address, initialAmount);
      await usdt.connect(user).approve(await nft.getAddress(), initialAmount);
    }
    
    return { nft, usdt, owner, users };
  }
  
  it("Should handle deep referral commission chains", async function() {
    const { nft, usdt, owner, users } = await loadFixture(deployFixture);
    
    console.log("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Commission Chain...");
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á chain ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ 10 ‡∏Ñ‡∏ô ‡πÇ‡∏î‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    let uplineAddress = owner.address;
    const memberEarningsBefore = new Map();
    
    for (let i = 0; i < users.length; i++) {
      console.log(`üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà ${i+1} ‡πÇ‡∏î‡∏¢‡∏°‡∏µ upline ‡πÄ‡∏õ‡πá‡∏ô ${uplineAddress.slice(0, 8)}...`);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å)
      if (i > 0) {
        const memberData = await nft.members(users[i-1].address);
        memberEarningsBefore.set(users[i-1].address, memberData.totalEarnings);
      }
      
      try {
        // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ upline ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        const tx = await nft.connect(users[i]).registerMember(1, uplineAddress);
        await tx.wait();
        
        console.log(`‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! User ${i+1}`);
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó upline ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        uplineAddress = users[i].address;
        
        // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á TooSoon error - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠
        if (i < users.length - 1) {
          await ethers.provider.send("evm_increaseTime", [90]); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 90 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
          await ethers.provider.send("evm_mine");
        }
        
      } catch (error) {
        console.error(`‚ùå ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß User ${i+1}:`, error.message);
        throw error;
      }
    }
    
    console.log("\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô:");
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô
    for (let i = 0; i < users.length; i++) {
      const memberData = await nft.members(users[i].address);
      
      console.log(`üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà ${i+1}:`);
      console.log(`   - Plan ID: ${memberData.planId}`);
      console.log(`   - Total Referrals: ${memberData.totalReferrals}`);
      console.log(`   - Total Earnings: ${ethers.formatUnits(memberData.totalEarnings, 6)} USDT`);
      console.log(`   - Upline: ${memberData.upline.slice(0, 8)}...`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
      if (i > 0 && memberEarningsBefore.has(users[i-1].address)) {
        const earningsBefore = memberEarningsBefore.get(users[i-1].address);
        const earningsAfter = memberData.totalEarnings;
        const earningsDiff = earningsAfter - earningsBefore;
        
        console.log(`   - ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô: ${ethers.formatUnits(earningsDiff, 6)} USDT`);
      }
      
      // ‡∏ó‡∏∏‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Ñ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
      if (i < users.length - 1) {
        expect(memberData.totalReferrals).to.equal(1, `User ${i+1} should have 1 referral`);
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    const lastMember = await nft.members(users[users.length - 1].address);
    expect(lastMember.totalReferrals).to.equal(0, "Last member should have 0 referrals");
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏° chain
    const planPrice = ethers.parseUnits("1", 6); // Plan 1 ‡∏£‡∏≤‡∏Ñ‡∏≤ 1 USDT (6 decimals)
    const userShare = (planPrice * 50n) / 100n; // 50% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô 1-4
    const uplineShare = (userShare * 60n) / 100n; // 60% ‡∏Ç‡∏≠‡∏á userShare
    
    console.log(`\nüí∞ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô:`);
    console.log(`- ‡πÅ‡∏ú‡∏ô 1 ‡∏£‡∏≤‡∏Ñ‡∏≤: ${ethers.formatUnits(planPrice, 6)} USDT`);
    console.log(`- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${ethers.formatUnits(userShare, 6)} USDT (50%)`);
    console.log(`- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô upline: ${ethers.formatUnits(uplineShare, 6)} USDT (60% ‡∏Ç‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
    const systemStats = await nft.getSystemStats();
    console.log(`\nüìä ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß: ${ethers.formatUnits(systemStats[2], 6)} USDT`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å
    expect(systemStats[2]).to.be.gt(0, "Total commission should be greater than 0");
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    expect(systemStats[0]).to.equal(users.length, `Should have ${users.length} total members`);
    
    console.log(`\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Commission Chain ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
    console.log(`   - ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${systemStats[0]} ‡∏Ñ‡∏ô`);
    console.log(`   - ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°: ${ethers.formatUnits(systemStats[1], 6)} USDT`);
    console.log(`   - ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô‡∏£‡∏ß‡∏°: ${ethers.formatUnits(systemStats[2], 6)} USDT`);
  });
  
  it("Should handle commission payment to owner when upline plan is lower", async function() {
    const { nft, usdt, owner, users } = await loadFixture(deployFixture);
    
    console.log("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢ commission ‡πÉ‡∏´‡πâ owner ‡πÄ‡∏°‡∏∑‡πà‡∏≠ upline ‡∏°‡∏µ plan ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤");
    
    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô user1 ‡πÉ‡∏ô plan 1
    await nft.connect(users[0]).registerMember(1, owner.address);
    
    // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤
    await ethers.provider.send("evm_increaseTime", [90]);
    await ethers.provider.send("evm_mine");
    
    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô user2 ‡πÉ‡∏ô plan 1 ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ user1 ‡πÄ‡∏õ‡πá‡∏ô upline
    await nft.connect(users[1]).registerMember(1, users[0].address);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user1 ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö commission
    const user1Data = await nft.members(users[0].address);
    expect(user1Data.totalEarnings).to.be.gt(0, "User1 should receive commission");
    expect(user1Data.totalReferrals).to.equal(1, "User1 should have 1 referral");
    
    console.log(`‚úÖ User1 ‡∏£‡∏±‡∏ö commission: ${ethers.formatUnits(user1Data.totalEarnings, 6)} USDT`);
  });
  
  it("Should handle multiple referral levels correctly", async function() {
    const { nft, usdt, owner, users } = await loadFixture(deployFixture);
    
    console.log("üîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢ commission ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö");
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á chain: Owner -> User0 -> User1 -> User2
    await nft.connect(users[0]).registerMember(1, owner.address);
    
    await ethers.provider.send("evm_increaseTime", [90]);
    await ethers.provider.send("evm_mine");
    
    await nft.connect(users[1]).registerMember(1, users[0].address);
    
    await ethers.provider.send("evm_increaseTime", [90]);
    await ethers.provider.send("evm_mine");
    
    await nft.connect(users[2]).registerMember(1, users[1].address);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö
    const user0Data = await nft.members(users[0].address);
    const user1Data = await nft.members(users[1].address);
    const user2Data = await nft.members(users[2].address);
    
    console.log(`User0 - Referrals: ${user0Data.totalReferrals}, Earnings: ${ethers.formatUnits(user0Data.totalEarnings, 6)} USDT`);
    console.log(`User1 - Referrals: ${user1Data.totalReferrals}, Earnings: ${ethers.formatUnits(user1Data.totalEarnings, 6)} USDT`);
    console.log(`User2 - Referrals: ${user2Data.totalReferrals}, Earnings: ${ethers.formatUnits(user2Data.totalEarnings, 6)} USDT`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö referrals
    expect(user0Data.totalReferrals).to.equal(1, "User0 should have 1 direct referral");
    expect(user1Data.totalReferrals).to.equal(1, "User1 should have 1 direct referral");
    expect(user2Data.totalReferrals).to.equal(0, "User2 should have 0 referrals");
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô upline ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö commission
    expect(user0Data.totalEarnings).to.be.gt(0, "User0 should earn commission");
    expect(user1Data.totalEarnings).to.be.gt(0, "User1 should earn commission");
    expect(user2Data.totalEarnings).to.equal(0, "User2 should not earn commission yet");
  });
});