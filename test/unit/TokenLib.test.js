// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç test/unit/TokenLib.test.js
const { expect } = require("chai");
const { ethers } = require("hardhat");
const { loadFixture } = require("@nomicfoundation/hardhat-network-helpers");

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TokenLib ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô CryptoMembershipNFT ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ TokenLibTester
// ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô TokenLib ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

describe("TokenLib Unit Tests", function () {
  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç deployFixture ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ decimals ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ***
  async function deployFixture() {
    const [owner, user1, user2] = await ethers.getSigners();
    
    // Deploy FakeUSDT
    const FakeUSDT = await ethers.getContractFactory("FakeUSDT");
    const usdt = await FakeUSDT.deploy();
    await usdt.waitForDeployment();

    // Deploy CryptoMembershipNFT
    const CryptoMembershipNFT = await ethers.getContractFactory("CryptoMembershipNFT");
    const nft = await CryptoMembershipNFT.deploy(await usdt.getAddress(), owner.address);
    await nft.waitForDeployment();

    // *** ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö decimals ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ ***
    const decimals = await usdt.decimals();
    console.log(`üí∞ USDT decimals: ${decimals}`);
    
    // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ parseUnits ‡πÅ‡∏ó‡∏ô parseEther ***
    const amount = ethers.parseUnits("50", decimals); // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 100 ‡πÄ‡∏õ‡πá‡∏ô 50 USDT
    
    // *** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô owner ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏≠‡∏ô ***
    const ownerBalance = await usdt.balanceOf(owner.address);
    console.log(`üë§ Owner balance: ${ethers.formatUnits(ownerBalance, decimals)} USDT`);
    
    // *** ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ***
    const totalNeeded = amount * BigInt([user1, user2].length);
    console.log(`üíµ Total needed: ${ethers.formatUnits(totalNeeded, decimals)} USDT`);
    
    if (ownerBalance < totalNeeded) {
      throw new Error(`Insufficient balance. Owner has ${ethers.formatUnits(ownerBalance, decimals)} USDT, but needs ${ethers.formatUnits(totalNeeded, decimals)} USDT`);
    }
    
    // ‡πÅ‡∏à‡∏Å USDT ‡πÅ‡∏•‡∏∞ approve ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user1
    await usdt.transfer(user1.address, amount);
    await usdt.connect(user1).approve(await nft.getAddress(), amount);
    
    // *** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö balance ‡∏´‡∏•‡∏±‡∏á transfer ***
    const user1Balance = await usdt.balanceOf(user1.address);
    console.log(`üë§ User1 balance: ${ethers.formatUnits(user1Balance, decimals)} USDT`);
    
    return { nft, usdt, owner, user1, user2, amount, decimals };
  }
  
  describe("safeTransferFrom", function () {
    it("Should safely transfer tokens from user to contract", async function () {
      const { nft, usdt, owner, user1, decimals } = await loadFixture(deployFixture);
      
      console.log("üîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô token ‡∏à‡∏≤‡∏Å user ‡πÑ‡∏õ contract ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢...");
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏≠‡∏ô
      const balanceBefore = await usdt.balanceOf(user1.address);
      const contractBalanceBefore = await usdt.balanceOf(await nft.getAddress());
      
      console.log(`üí∞ ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏≠‡∏ô:`);
      console.log(`   User1: ${ethers.formatUnits(balanceBefore, decimals)} USDT`);
      console.log(`   Contract: ${ethers.formatUnits(contractBalanceBefore, decimals)} USDT`);
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ TokenLib.safeTransferFrom
      await nft.connect(user1).registerMember(1, owner.address);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏≠‡∏ô
      const balanceAfter = await usdt.balanceOf(user1.address);
      const contractBalanceAfter = await usdt.balanceOf(await nft.getAddress());
      
      console.log(`üí∞ ‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏≠‡∏ô:`);
      console.log(`   User1: ${ethers.formatUnits(balanceAfter, decimals)} USDT`);
      console.log(`   Contract: ${ethers.formatUnits(contractBalanceAfter, decimals)} USDT`);
      
      // ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ user1 ‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏•‡∏á
      expect(balanceBefore).to.be.gt(balanceAfter);
      
      // ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á contract ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
      expect(contractBalanceAfter).to.be.gt(contractBalanceBefore);
      
      // ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ user1 ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ contract
      const userDiff = balanceBefore - balanceAfter;
      const contractDiff = contractBalanceAfter - contractBalanceBefore;
      expect(userDiff).to.equal(contractDiff);
      
      console.log(`‚úÖ ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${ethers.formatUnits(userDiff, decimals)} USDT`);
    });
    
    it("Should fail if approval is insufficient", async function () {
      const { nft, usdt, owner, user2, decimals } = await loadFixture(deployFixture);
      
      console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ approval ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠...");
      
      // ‡πÉ‡∏´‡πâ USDT ‡πÅ‡∏Å‡πà user2 ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ contract ‡πÉ‡∏ä‡πâ
      const testAmount = ethers.parseUnits("10", decimals);
      await usdt.transfer(user2.address, testAmount);
      
      const user2Balance = await usdt.balanceOf(user2.address);
      console.log(`üë§ User2 balance: ${ethers.formatUnits(user2Balance, decimals)} USDT (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ approve)`);
      
      // ‡∏Ñ‡∏ß‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ contract ‡πÉ‡∏ä‡πâ USDT
      await expect(
        nft.connect(user2).registerMember(1, owner.address)
      ).to.be.reverted;
      
      console.log("‚úÖ ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô insufficient approval ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    });
  });
  
  describe("safeTransfer", function () {
    it("Should safely transfer tokens from contract to user", async function () {
      const { nft, usdt, owner, user1, decimals } = await loadFixture(deployFixture);
      
      console.log("üîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô token ‡∏à‡∏≤‡∏Å contract ‡πÑ‡∏õ user...");
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô contract
      await nft.connect(user1).registerMember(1, owner.address);
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á owner
      const systemStats = await nft.getSystemStats();
      const ownerBalance = systemStats[3]; // ownerFunds
      
      console.log(`üí∞ Owner funds ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: ${ethers.formatUnits(ownerBalance, decimals)} USDT`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏≠‡∏ô
      const ownerBalanceBefore = await usdt.balanceOf(owner.address);
      const contractBalanceBefore = await usdt.balanceOf(await nft.getAddress());
      
      console.log(`üí∞ ‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏≠‡∏ô:`);
      console.log(`   Owner wallet: ${ethers.formatUnits(ownerBalanceBefore, decimals)} USDT`);
      console.log(`   Contract: ${ethers.formatUnits(contractBalanceBefore, decimals)} USDT`);
      
      // ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡πÅ‡∏ô‡∏≠‡∏£‡πå‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ TokenLib.safeTransfer
      await nft.connect(owner).withdrawOwnerBalance(ownerBalance);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏ñ‡∏≠‡∏ô
      const ownerBalanceAfter = await usdt.balanceOf(owner.address);
      const contractBalanceAfter = await usdt.balanceOf(await nft.getAddress());
      
      console.log(`üí∞ ‡∏´‡∏•‡∏±‡∏á‡∏ñ‡∏≠‡∏ô:`);
      console.log(`   Owner wallet: ${ethers.formatUnits(ownerBalanceAfter, decimals)} USDT`);
      console.log(`   Contract: ${ethers.formatUnits(contractBalanceAfter, decimals)} USDT`);
      
      // ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ owner ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
      expect(ownerBalanceAfter).to.be.gt(ownerBalanceBefore);
      
      // ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á contract ‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏•‡∏á
      expect(contractBalanceBefore).to.be.gt(contractBalanceAfter);
      
      // ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ owner ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ contract
      const ownerDiff = ownerBalanceAfter - ownerBalanceBefore;
      const contractDiff = contractBalanceBefore - contractBalanceAfter;
      expect(ownerDiff).to.equal(contractDiff);
      expect(ownerDiff).to.equal(ownerBalance);
      
      console.log(`‚úÖ ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${ethers.formatUnits(ownerDiff, decimals)} USDT`);
    });
  });
  
  describe("validateWithdrawal", function () {
    it("Should validate withdrawal if amount is less than or equal to balance", async function () {
      const { nft, owner, user1, decimals } = await loadFixture(deployFixture);
      
      console.log("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ validate ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á...");
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô contract
      await nft.connect(user1).registerMember(1, owner.address);
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á owner
      const systemStats = await nft.getSystemStats();
      const ownerBalance = systemStats[3]; // ownerFunds
      
      console.log(`üí∞ Owner funds: ${ethers.formatUnits(ownerBalance, decimals)} USDT`);
      
      // ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡πÅ‡∏ô‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏Ñ‡∏ß‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
      await nft.connect(owner).withdrawOwnerBalance(ownerBalance);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô 0
      const updatedStats = await nft.getSystemStats();
      expect(updatedStats[3]).to.equal(0n);
      
      console.log("‚úÖ ‡∏Å‡∏≤‡∏£ validate withdrawal ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    });
    
    it("Should revert if withdrawal amount is greater than balance", async function () {
      const { nft, owner, user1, decimals } = await loadFixture(deployFixture);
      
      console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ validate ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠...");
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô contract
      await nft.connect(user1).registerMember(1, owner.address);
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á owner
      const systemStats = await nft.getSystemStats();
      const ownerBalance = systemStats[3]; // ownerFunds
      
      console.log(`üí∞ Owner funds: ${ethers.formatUnits(ownerBalance, decimals)} USDT`);
      
      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
      const excessAmount = ownerBalance + ethers.parseUnits("1", decimals);
      console.log(`üí∏ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏¢‡∏ñ‡∏≠‡∏ô: ${ethers.formatUnits(excessAmount, decimals)} USDT (‡πÄ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠)`);
      
      await expect(
        nft.connect(owner).withdrawOwnerBalance(excessAmount)
      ).to.be.revertedWithCustomError(nft, "LowOwnerBalance");
      
      console.log("‚úÖ ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    });
  });
  
  describe("Security and Edge Cases", function () {
    it("Should handle zero token transfers correctly", async function () {
      const { nft, owner } = await loadFixture(deployFixture);
      
      console.log("0Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô 0 ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô...");
      
      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô 0 (‡∏Ñ‡∏ß‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
      await nft.connect(owner).withdrawOwnerBalance(0);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
      const systemStats = await nft.getSystemStats();
      expect(systemStats[3]).to.equal(0n); // ownerFunds ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô 0
      
      console.log("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô 0 ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    });
    
    it("Should handle gas griefing attack simulation", async function () {
      const { nft, usdt, owner, user1, decimals } = await loadFixture(deployFixture);
      
      console.log("‚ö° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô gas griefing attack...");
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô contract
      await nft.connect(user1).registerMember(1, owner.address);
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á owner
      const systemStats = await nft.getSystemStats();
      const ownerBalance = systemStats[3]; // ownerFunds
      
      console.log(`üí∞ Owner funds: ${ethers.formatUnits(ownerBalance, decimals)} USDT`);
      
      // ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡πÅ‡∏ô‡∏≠‡∏£‡πå
      await nft.connect(owner).withdrawOwnerBalance(ownerBalance);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô 0
      const updatedStats = await nft.getSystemStats();
      expect(updatedStats[3]).to.equal(0n);
      
      console.log("‚úÖ ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô gas griefing ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    });
    
    it("Should prevent reentrancy attacks", async function () {
      // TokenLib ‡πÉ‡∏ä‡πâ SafeERC20 ‡∏ã‡∏∂‡πà‡∏á‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô reentrancy attack ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      // ‡πÅ‡∏ï‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πÑ‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô reentrancy ‡πÉ‡∏ô contract ‡∏´‡∏•‡∏±‡∏Å
      
      const { nft, owner, user1, decimals } = await loadFixture(deployFixture);
      
      console.log("üõ°Ô∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô reentrancy attack...");
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);
      
      // ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÅ‡∏ö‡∏ö reentrancy contract ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö flag _inTransaction
      // ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å flag ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
      // ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏°‡∏µ modifier noReentrantTransfer
      
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ noReentrantTransfer ‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      // ‡πÄ‡∏£‡∏≤‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
      
      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ reentrancy ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
      // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤
      // ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ noReentrantTransfer ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      
      // ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡πÅ‡∏ô‡∏≠‡∏£‡πå (‡∏°‡∏µ noReentrantTransfer)
      const systemStats = await nft.getSystemStats();
      const ownerBalance = systemStats[3]; // ownerFunds
      
      console.log(`üí∞ Owner funds: ${ethers.formatUnits(ownerBalance, decimals)} USDT`);
      
      if (ownerBalance > 0n) {
        await nft.connect(owner).withdrawOwnerBalance(ownerBalance);
        console.log("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ (‡∏°‡∏µ reentrancy protection)");
      }
      
      console.log("üõ°Ô∏è TokenLib ‡πÉ‡∏ä‡πâ SafeERC20 ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏µ reentrancy protection ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß");
      console.log("üõ°Ô∏è Contract ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ä‡πâ noReentrantTransfer modifier");
    });
  });
  
  describe("Additional TokenLib Features", function () {
    it("Should demonstrate balance validation before transfers", async function () {
      const { nft, usdt, owner, user1, decimals } = await loadFixture(deployFixture);
      
      console.log("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö balance ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏≠‡∏ô...");
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á balance
      await nft.connect(user1).registerMember(1, owner.address);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö balance ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      const systemStats = await nft.getSystemStats();
      console.log(`üìä System stats:`);
      console.log(`   Owner funds: ${ethers.formatUnits(systemStats[3], decimals)} USDT`);
      console.log(`   Fee funds: ${ethers.formatUnits(systemStats[4], decimals)} USDT`);
      console.log(`   Fund balance: ${ethers.formatUnits(systemStats[5], decimals)} USDT`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ TokenLib.validateWithdrawal ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      // ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (systemStats[3] > 0n) {
        await nft.connect(owner).withdrawOwnerBalance(systemStats[3]);
        console.log("‚úÖ Balance validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      }
    });
    
    it("Should handle edge cases with small amounts", async function () {
      const { nft, usdt, owner, user1, decimals } = await loadFixture(deployFixture);
      
      console.log("üî¨ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å...");
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);
      
      // ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
      const smallAmount = 1n; // 1 wei ‡∏Ç‡∏≠‡∏á USDT
      const systemStats = await nft.getSystemStats();
      const ownerBalance = systemStats[3];
      
      if (ownerBalance >= smallAmount) {
        await nft.connect(owner).withdrawOwnerBalance(smallAmount);
        console.log(`‚úÖ ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡πá‡∏Å (${smallAmount} wei) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      } else {
        console.log("‚ö†Ô∏è Owner balance ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡πá‡∏Å");
      }
    });
    
    it("Should demonstrate SafeERC20 wrapper functionality", async function () {
      const { nft, usdt, owner, user1, decimals } = await loadFixture(deployFixture);
      
      console.log("üîí ‡∏ó‡∏î‡∏™‡∏≠‡∏ö SafeERC20 wrapper functionality...");
      
      // TokenLib wraps SafeERC20 functions ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏ô‡πÄ‡∏ï‡∏¥‡∏°
      // ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö balance ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
      
      const balanceBefore = await usdt.balanceOf(user1.address);
      console.log(`üí∞ User1 balance ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: ${ethers.formatUnits(balanceBefore, decimals)} USDT`);
      
      // ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏à‡∏∞‡πÉ‡∏ä‡πâ TokenLib.safeTransferFrom
      await nft.connect(user1).registerMember(1, owner.address);
      
      const balanceAfter = await usdt.balanceOf(user1.address);
      console.log(`üí∞ User1 balance ‡∏´‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: ${ethers.formatUnits(balanceAfter, decimals)} USDT`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      expect(balanceBefore).to.be.gt(balanceAfter);
      
      console.log("‚úÖ SafeERC20 wrapper ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      console.log("üîí TokenLib ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö balance ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ SafeERC20");
    });
  });
});