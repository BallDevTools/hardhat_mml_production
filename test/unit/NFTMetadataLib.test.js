// test/unit/NFTMetadataLib.test.js
const { expect } = require("chai");
const { ethers } = require("hardhat");

// Helper contract to expose library functions for testing
const NFTMetadataLibTesterArtifact = {
  _format: "hh-sol-artifact-1",
  contractName: "NFTMetadataLibTester",
  sourceName: "contracts/test/NFTMetadataLibTester.sol",
  abi: [
    {
      inputs: [],
      stateMutability: "nonpayable",
      type: "constructor",
    },
    {
      inputs: [
        {
          internalType: "bytes",
          name: "data",
          type: "bytes",
        },
      ],
      name: "testBase64Encode",
      outputs: [
        {
          internalType: "string",
          name: "",
          type: "string",
        },
      ],
      stateMutability: "pure",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "_i",
          type: "uint256",
        },
      ],
      name: "testUint2str",
      outputs: [
        {
          internalType: "string",
          name: "",
          type: "string",
        },
      ],
      stateMutability: "pure",
      type: "function",
    },
  ],
  bytecode: "0x608060405234801561001057600080fd5b50610429806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063410aac6e1461003b578063bde58d3c1461006c575b600080fd5b61005560048036038101906100509190610199565b61009d565b60405161006391906101ef565b60405180910390f35b61008660048036038101906100819190610333565b6100b9565b60405161009491906101ef565b60405180910390f35b60006100a8826100d5565b9050919050565b60006100c4826101aa565b9050919050565b60606000808285516100e6919061038a565b90506000816100f5919061038a565b6040516100ff90610211565b90506000815167ffffffffffffffff81111561011e5761011d61022b565b5b60405190808252806020026020018201604052801561015257816020015b606081526020019060019003908161013d5790505b50905060005b82815181101561019e5761017385858381518110610176575b6020020135610187565b82828151811061018257fe5b602002602001018190525080806101969061025a565b915050610158565b5090505b92915050565b6000813590506101a981610412565b92915050565b606060008214156101de576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506101ff565b600082905060006101ef600a83610286565b61010001905080915050809250505b919050565b60006020820190508181036000830152610208816102c5565b9050919050565b610219610307565b61022281610316565b91505090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006001820161029857610297610258565b5b81905092915050565b6102ab8161027c565b81146102b657600080fd5b50565b6000815190506102c88161027c565b92915050565b600082825260208201905092915050565b60005b838110156102f75780820151818401526020810190506102dc565b83811115610306576000848401525b50505050565b604051905090565b6000819050919050565b600061032d61032884610316565b610316565b9050919050565b60006020828403121561034957610348610411565b5b600061035784828501610198565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061039582610316565b91506103a083610316565b9250826103b0576103af610362565b5b828204905092915050565b6000819050919050565b6000610400610407610402846103bb565b6103e7565b6103bb565b9050919050565b61041081610316565b811461041b57600080fd5b50565b6000815190506104268161031e565b92915050565b600080fd5b6000815190506104408161031e565b92915050565b60006104516103bb565b9050610461818261046c565b919050565b6000610477610472846103bb565b6103bb565b9050919050565b600061049161048c846103bb565b6103bb565b9050919050565b600061049c846103bb565b90506104ac818261046c565b9392505050565b6000604051905090565b600067ffffffffffffffff8211156104d6576104d561022b565b5b6104e0826102de565b9050602081019050919050565b600082601f8301126104ff576104fe610405565b5b813561050f8482602086016104bd565b91505092915050565b600060608201905081810360008301526105338184516104ad565b50505050565b6000606082019050818103600083015261055281846104ad565b90509392505050565b600080fd5b600080fd5b60006020820190506105778282516104ad565b9050919050565b600067ffffffffffffffff8211156105955761059461022b565b5b602082029050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006020820190506105d5828251610599565b9050919050565b600067ffffffffffffffff8211156105f4576105f361022b565b5b602082029050602081019050919050565b6000610619610614846105d9565b6105b9565b90506106258282516105c0565b9050919050565b600067ffffffffffffffff821115610644576106431082",
  deployedBytecode: "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063410aac6e1461003b578063bde58d3c1461006c575b600080fd5b61005560048036038101906100509190610199565b61009d565b60405161006391906101ef565b60405180910390f35b61008660048036038101906100819190610333565b6100b9565b60405161009491906101ef565b60405180910390f35b60006100a8826100d5565b9050919050565b60006100c4826101aa565b9050919050565b60606000808285516100e6919061038a565b90506000816100f5919061038a565b6040516100ff90610211565b90506000815167ffffffffffffffff81111561011e5761011d61022b565b5b604051908082528060200260200182016040528015610152578160200151606081526020019060019003908161013d5790505b50905060005b82815181101561019e5761017385858381518110610176575b6020020135610187565b82828151811061018257fe5b602002602001018190525080806101969061025a565b915050610158565b5090505b92915050565b6000813590506101a981610412565b92915050565b606060008214156101de576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506101ff565b600082905060006101ef600a83610286565b61010001905080915050809250505b919050565b60006020820190508181036000830152610208816102c5565b9050919050565b610219610307565b61022281610316565b91505090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006001820161029857610297610258565b5b81905092915050565b6102ab8161027c565b81146102b657600080fd5b50565b6000815190506102c88161027c565b92915050565b600082825260208201905092915050565b60005b838110156102f75780820151818401526020810190506102dc565b83811115610306576000848401525b50505050565b604051905090565b6000819050919050565b6000610100",
  linkReferences: {},
  deployedLinkReferences: {},
};

const NFTMetadataLibContractFactory = async () => {
  // First deploy the library
  const NFTMetadataLib = await ethers.getContractFactory("NFTMetadataLib");
  const nftMetadataLib = await NFTMetadataLib.deploy();
  await nftMetadataLib.waitForDeployment();
  
  // Create test contract with library functions exposed
  const testContractArtifact = {
    ...NFTMetadataLibTesterArtifact,
    linkReferences: {
      "contracts/test/NFTMetadataLibTester.sol": {
        "NFTMetadataLib": [
          {
            length: 20,
            start: 422,
          },
        ],
      },
    },
  };
  
  // Deploy the test contract with library linked
  return ethers.getContractFactoryFromArtifact(testContractArtifact, {
    libraries: {
      NFTMetadataLib: await nftMetadataLib.getAddress(),
    },
  });
};

describe("NFTMetadataLib", function () {
  let tester;

  before(async function () {
    // Deploy the test contract that calls the library functions
    console.log("Creating contract factory...");
    const TestContract = await NFTMetadataLibContractFactory();
    console.log("Deploying test contract...");
    tester = await TestContract.deploy();
    await tester.waitForDeployment();
    console.log("Test contract deployed at:", await tester.getAddress());
  });

  describe("uint2str", function() {
    it("should convert 0 to string '0'", async function() {
      const result = await tester.testUint2str(0);
      expect(result).to.equal("0");
    });

    it("should convert positive integers to strings", async function() {
      const result = await tester.testUint2str(12345);
      expect(result).to.equal("12345");
    });

    it("should convert large numbers to strings", async function() {
      const result = await tester.testUint2str(999999999);
      expect(result).to.equal("999999999");
    });
  });

  describe("base64Encode", function() {
    it("should encode empty data as empty string", async function() {
      const result = await tester.testBase64Encode([]);
      expect(result).to.equal("");
    });

    it("should correctly encode 'Hello World!'", async function() {
      const data = ethers.toUtf8Bytes("Hello World!");
      const result = await tester.testBase64Encode(data);
      expect(result).to.equal("SGVsbG8gV29ybGQh");
    });
  });
});