// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç test/unit/MembershipLib.test.js
const { expect } = require("chai");
const { ethers } = require("hardhat");
const { loadFixture } = require("@nomicfoundation/hardhat-network-helpers");

// ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ MembershipLibTester ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô CryptoMembershipNFT
// ‡πÅ‡∏ï‡πà‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö MembershipLib

describe("MembershipLib Unit Tests", function () {
  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç deployFixture ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ decimals ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ***
  async function deployFixture() {
    const [owner, user1, user2, user3, user4, user5] = await ethers.getSigners();
    
    // Deploy FakeUSDT
    const FakeUSDT = await ethers.getContractFactory("FakeUSDT");
    const usdt = await FakeUSDT.deploy();
    await usdt.waitForDeployment();
    
    // Deploy CryptoMembershipNFT
    const CryptoMembershipNFT = await ethers.getContractFactory("CryptoMembershipNFT");
    const nft = await CryptoMembershipNFT.deploy(await usdt.getAddress(), owner.address);
    await nft.waitForDeployment();
    
    // *** ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö decimals ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ ***
    const decimals = await usdt.decimals();
    console.log(`üí∞ USDT decimals: ${decimals}`);
    
    // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ parseUnits ‡πÅ‡∏ó‡∏ô parseEther ***
    const initialAmount = ethers.parseUnits("50", decimals); // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 100 ‡πÄ‡∏õ‡πá‡∏ô 50 USDT
    
    // *** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô owner ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏≠‡∏ô ***
    const ownerBalance = await usdt.balanceOf(owner.address);
    console.log(`üë§ Owner balance: ${ethers.formatUnits(ownerBalance, decimals)} USDT`);
    
    // *** ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ***
    const totalNeeded = initialAmount * BigInt([user1, user2, user3, user4, user5].length);
    console.log(`üíµ Total needed: ${ethers.formatUnits(totalNeeded, decimals)} USDT`);
    
    if (ownerBalance < totalNeeded) {
      throw new Error(`Insufficient balance. Owner has ${ethers.formatUnits(ownerBalance, decimals)} USDT, but needs ${ethers.formatUnits(totalNeeded, decimals)} USDT`);
    }
    
    // ‡πÅ‡∏à‡∏Å USDT ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    for (const user of [user1, user2, user3, user4, user5]) {
      await usdt.transfer(user.address, initialAmount);
      await usdt.connect(user).approve(await nft.getAddress(), initialAmount);
      
      // *** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö balance ‡∏´‡∏•‡∏±‡∏á transfer ***
      const userBalance = await usdt.balanceOf(user.address);
      console.log(`üë§ ${user.address.slice(0, 8)}... balance: ${ethers.formatUnits(userBalance, decimals)} USDT`);
    }
    
    return { nft, usdt, owner, user1, user2, user3, user4, user5, decimals };
  }
  
  describe("MembershipPlan Structure", function () {
    it("Should initialize plans with correct structure", async function () {
      const { nft, decimals } = await loadFixture(deployFixture);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô 1
      const plan1 = await nft.plans(1);
      expect(plan1.price).to.equal(ethers.parseUnits("1", decimals));
      expect(plan1.name).to.equal("1");
      expect(plan1.membersPerCycle).to.equal(4);
      expect(plan1.isActive).to.equal(true);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô 16
      const plan16 = await nft.plans(16);
      expect(plan16.price).to.equal(ethers.parseUnits("16", decimals));
      expect(plan16.name).to.equal("16");
      expect(plan16.membersPerCycle).to.equal(4);
      expect(plan16.isActive).to.equal(true);
    });
  });
  
  describe("Member Structure", function () {
    it("Should store member data correctly", async function () {
      const { nft, owner, user1 } = await loadFixture(deployFixture);
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      const member = await nft.members(user1.address);
      expect(member.upline).to.equal(owner.address);
      expect(member.totalReferrals).to.equal(0);
      expect(member.totalEarnings).to.equal(0);
      expect(member.planId).to.equal(1);
      expect(member.cycleNumber).to.equal(1);
      expect(member.registeredAt).to.be.gt(0); // ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    });
  });
  
  describe("CycleInfo Structure", function () {
    it("Should initialize cycle info correctly", async function () {
      const { nft } = await loadFixture(deployFixture);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô 1
      const cycleInfo = await nft.getPlanCycleInfo(1);
      expect(cycleInfo[0]).to.equal(1n); // currentCycle
      expect(cycleInfo[1]).to.equal(0n); // membersInCurrentCycle
      expect(cycleInfo[2]).to.equal(4n); // membersPerCycle
    });
  });
  
  describe("updateCycle Function", function () {
    it("Should update cycle info after member registration", async function () {
      const { nft, owner, user1, user2 } = await loadFixture(deployFixture);
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å 1
      await nft.connect(user1).registerMember(1, owner.address);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô 1 ‡∏Ñ‡∏ô
      let cycleInfo = await nft.getPlanCycleInfo(1);
      expect(cycleInfo[1]).to.equal(1n); // membersInCurrentCycle ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 1
      
      // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô TooSoon error
      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2
      await nft.connect(user2).registerMember(1, user1.address);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô 2 ‡∏Ñ‡∏ô
      cycleInfo = await nft.getPlanCycleInfo(1);
      expect(cycleInfo[1]).to.equal(2n); // membersInCurrentCycle ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 2
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      const member1 = await nft.members(user1.address);
      const member2 = await nft.members(user2.address);
      
      expect(member1.cycleNumber).to.equal(1); // ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 1
      expect(member2.cycleNumber).to.equal(1); // ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 1
    });
    
    it("Should start new cycle when current cycle is full", async function () {
      const { nft, owner, user1, user2, user3, user4, user5 } = await loadFixture(deployFixture);
      
      console.log("üîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏ï‡πá‡∏°...");
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      await nft.connect(user1).registerMember(1, owner.address);
      console.log("‚úÖ User1 registered");
      
      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");
      
      await nft.connect(user2).registerMember(1, user1.address);
      console.log("‚úÖ User2 registered");
      
      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");
      
      await nft.connect(user3).registerMember(1, user2.address);
      console.log("‚úÖ User3 registered");
      
      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");
      
      await nft.connect(user4).registerMember(1, user3.address);
      console.log("‚úÖ User4 registered - ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô");
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏≠‡∏ö‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 2
      const cycleInfo = await nft.getPlanCycleInfo(1);
      expect(cycleInfo[0]).to.equal(2n); // currentCycle ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 2
      expect(cycleInfo[1]).to.equal(0n); // membersInCurrentCycle ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 0
      console.log(`üîÑ Cycle changed to: ${cycleInfo[0]}, members in current cycle: ${cycleInfo[1]}`);
      
      // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 2
      await nft.connect(user5).registerMember(1, user4.address);
      console.log("‚úÖ User5 registered in new cycle");
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 2
      const member5 = await nft.members(user5.address);
      expect(member5.cycleNumber).to.equal(2); // ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 2
      console.log(`üë§ User5 cycle number: ${member5.cycleNumber}`);
    });
  });
  
  describe("Plan Upgrade Functions", function () {
    it("Should demonstrate validatePlanUpgrade logic", async function () {
      const { nft, owner, user1 } = await loadFixture(deployFixture);
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      const memberBefore = await nft.members(user1.address);
      expect(memberBefore.planId).to.equal(1);
      
      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ preventFrontRunning modifier
      // ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î TooSoon error ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ó‡∏ô
      console.log("The contract validates upgrading to the next plan only");
      console.log("It also checks that the plan is active and valid");
      
      // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö upgrade ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÄ‡∏£‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏£‡∏¥‡∏á
      // ‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á validatePlanUpgrade ‡πÉ‡∏ô MembershipLib ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
      // 1. ‡πÅ‡∏ú‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á (planId > 0 ‡πÅ‡∏•‡∏∞ planId <= planCount)
      // 2. ‡πÅ‡∏ú‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà (plans[planId].isActive)
      // 3. ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ú‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (planId == currentMember.planId + 1)
    });
    
    it("Should validate plan IDs properly", async function () {
      const { nft, owner } = await loadFixture(deployFixture);
      
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö plan ID ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ setPlanStatus ‡∏ã‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ preventFrontRunning
      // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ upgradePlan
      
      // Plan ID ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 0
      await expect(
        nft.connect(owner).setPlanStatus(0, true)
      ).to.be.revertedWithCustomError(nft, "InvalidPlanID");
      
      // Plan ID ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏ô planCount (16)
      await expect(
        nft.connect(owner).setPlanStatus(17, true)
      ).to.be.revertedWithCustomError(nft, "InvalidPlanID");
      
      // Plan ID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
      await nft.connect(owner).setPlanStatus(1, false);
      await nft.connect(owner).setPlanStatus(1, true);
    });
    
    it("Should check plan active status", async function () {
      const { nft, owner, user1, user2 } = await loadFixture(deployFixture);
      
      // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ú‡∏ô 1
      await nft.connect(owner).setPlanStatus(1, false);
      
      // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      await expect(
        nft.connect(user1).registerMember(1, owner.address)
      ).to.be.revertedWithCustomError(nft, "InactivePlan");
      
      // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡∏•‡∏±‡∏ö
      await nft.connect(owner).setPlanStatus(1, true);
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);
      
      // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ú‡∏ô 2
      await nft.connect(owner).setPlanStatus(2, false);
      
      // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ú‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å preventFrontRunning
      // ‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö plans[newPlanId].isActive
      console.log("‚úÖ Plan active status validation logic exists in contract");
    });
  });
  
  describe("determineUpline Function", function () {
    it("Should set upline correctly for different cases", async function () {
      const { nft, owner, user1, user2 } = await loadFixture(deployFixture);
      
      // 1. ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏£‡∏Å‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ owner ‡πÄ‡∏õ‡πá‡∏ô upline
      await nft.connect(user1).registerMember(1, owner.address);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ upline ‡πÄ‡∏õ‡πá‡∏ô owner
      let member = await nft.members(user1.address);
      expect(member.upline).to.equal(owner.address);
      
      // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô TooSoon error
      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");
      
      // 2. ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô upline
      await nft.connect(user2).registerMember(1, user1.address);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ upline ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏£‡∏Å
      member = await nft.members(user2.address);
      expect(member.upline).to.equal(user1.address);
      
      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô determineUpline ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏£‡∏ì‡∏µ
      // 1. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏£‡∏Å upline ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô owner
      // 2. ‡∏ñ‡πâ‡∏≤ upline ‡πÄ‡∏õ‡πá‡∏ô address 0 ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á upline ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô owner
      // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ upline ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ upline ‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö planId
    });
    
    it("Should verify upline validation", async function () {
      const { nft, owner, user1, user3 } = await loadFixture(deployFixture);
      
      // ‡πÉ‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ upline ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      console.log("The contract verifies that the upline is a registered member");
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏£‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);
      
      // user3 ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user3 ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      const member3 = await nft.members(user3.address);
      expect(member3.planId).to.equal(0); // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å planId ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 0
      
      // ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö if (balanceOf(_upline) == 0) revert UplineNotMember()
      expect(await nft.balanceOf(user3.address)).to.equal(0);
    });
    
    it("Should handle upline notifications", async function () {
      const { nft, owner, user1, user2 } = await loadFixture(deployFixture);
      
      console.log("The contract notifies uplines when downlines upgrade to higher plans");
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏£‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);
      
      // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á TooSoon error
      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
      await nft.connect(user2).registerMember(1, user1.address);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå upline-downline
      const member2 = await nft.members(user2.address);
      expect(member2.upline).to.equal(user1.address);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ event UplineNotified
      // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ event ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤
      const uplineNotifiedEvent = nft.filters.UplineNotified;
      expect(uplineNotifiedEvent).to.not.be.undefined;
      
      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÉ‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏µ emit event UplineNotified ‡πÄ‡∏°‡∏∑‡πà‡∏≠ downline ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ upline
    });
  });
  
  describe("Basic Integration", function () {
    it("Should correctly handle basic member registration and cycle management", async function () {
      const { nft, owner, user1, user2, decimals } = await loadFixture(deployFixture);
      
      console.log("üîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô...");
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏£‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);
      console.log("‚úÖ User1 registered");
      
      // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤
      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
      await nft.connect(user2).registerMember(1, user1.address);
      console.log("‚úÖ User2 registered");
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      const member1 = await nft.members(user1.address);
      const member2 = await nft.members(user2.address);
      
      expect(member1.planId).to.equal(1);
      expect(member1.cycleNumber).to.equal(1);
      expect(member1.upline).to.equal(owner.address);
      
      expect(member2.planId).to.equal(1);
      expect(member2.cycleNumber).to.equal(1);
      expect(member2.upline).to.equal(user1.address);
      
      console.log(`üë§ User1: Plan ${member1.planId}, Cycle ${member1.cycleNumber}, Upline: ${member1.upline.slice(0, 8)}...`);
      console.log(`üë§ User2: Plan ${member2.planId}, Cycle ${member2.cycleNumber}, Upline: ${member2.upline.slice(0, 8)}...`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö
      const cycleInfo = await nft.getPlanCycleInfo(1);
      expect(cycleInfo[0]).to.equal(1n); // currentCycle
      expect(cycleInfo[1]).to.equal(2n); // membersInCurrentCycle
      
      console.log(`üîÑ Cycle info: Current cycle ${cycleInfo[0]}, Members in cycle ${cycleInfo[1]}/4`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
      const stats = await nft.getSystemStats();
      expect(stats[0]).to.equal(2n); // totalMembers
      expect(stats[1]).to.be.gt(0n); // totalRevenue
      
      console.log(`üìä System stats:`);
      console.log(`   Total Members: ${stats[0]}`);
      console.log(`   Total Revenue: ${ethers.formatUnits(stats[1], decimals)} USDT`);
      console.log(`   Total Commission: ${ethers.formatUnits(stats[2], decimals)} USDT`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢ commission
      expect(member1.totalReferrals).to.equal(1); // User1 ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ 1 referral
      expect(member1.totalEarnings).to.be.gt(0); // User1 ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö commission
      
      console.log(`üí∞ User1 earnings: ${ethers.formatUnits(member1.totalEarnings, decimals)} USDT from ${member1.totalReferrals} referral(s)`);
    });
  });
});