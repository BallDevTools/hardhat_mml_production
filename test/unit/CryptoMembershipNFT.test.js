const { expect } = require("chai");
const { ethers } = require("hardhat");
const { loadFixture } = require("@nomicfoundation/hardhat-network-helpers");

describe("CryptoMembershipNFT Unit Tests", function () {
  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç deployFixture ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ decimals ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ***
  async function deployFixture() {
    const [owner, user1, user2, user3, user4, user5] = await ethers.getSigners();

    // Deploy FakeUSDT
    const FakeUSDT = await ethers.getContractFactory("FakeUSDT");
    const usdt = await FakeUSDT.deploy();
    await usdt.waitForDeployment();

    // Deploy CryptoMembershipNFT
    const CryptoMembershipNFT = await ethers.getContractFactory("CryptoMembershipNFT");
    const nft = await CryptoMembershipNFT.deploy(await usdt.getAddress(), owner.address);
    await nft.waitForDeployment();

    // *** ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö decimals ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ ***
    const decimals = await usdt.decimals();
    console.log(`üí∞ USDT decimals: ${decimals}`);

    // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ parseUnits ‡πÅ‡∏ó‡∏ô parseEther ***
    const initialAmount = ethers.parseUnits("100", decimals); // 100 USDT

    // *** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô owner ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏≠‡∏ô ***
    const ownerBalance = await usdt.balanceOf(owner.address);
    console.log(`üë§ Owner balance: ${ethers.formatUnits(ownerBalance, decimals)} USDT`);

    // *** ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ***
    const totalNeeded = initialAmount * BigInt([user1, user2, user3, user4, user5].length);
    console.log(`üíµ Total needed: ${ethers.formatUnits(totalNeeded, decimals)} USDT`);

    if (ownerBalance < totalNeeded) {
      throw new Error(`Insufficient balance. Owner has ${ethers.formatUnits(ownerBalance, decimals)} USDT, but needs ${ethers.formatUnits(totalNeeded, decimals)} USDT`);
    }

    // ‡πÅ‡∏à‡∏Å USDT ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    for (const user of [user1, user2, user3, user4, user5]) {
      await usdt.transfer(user.address, initialAmount);
      await usdt.connect(user).approve(await nft.getAddress(), initialAmount);
    }

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á plan ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö - *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ decimals ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ***
    const planPrices = [];
    for (let i = 1; i <= 16; i++) {
      const plan = await nft.plans(i);
      planPrices.push(plan.price);
    }

    return { nft, usdt, owner, user1, user2, user3, user4, user5, planPrices, decimals };
  }

  describe("Deployment", function () {
    it("Should deploy correctly with default plans", async function () {
      const { nft, usdt, owner, decimals } = await loadFixture(deployFixture);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ contract ‡∏ñ‡∏π‡∏Å deploy ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      expect(await nft.usdtToken()).to.equal(await usdt.getAddress());
      expect(await nft.owner()).to.equal(owner.address);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏£‡∏Å (‡πÅ‡∏ú‡∏ô 1)
      const plan1 = await nft.plans(1);
      expect(plan1.price).to.equal(ethers.parseUnits("1", decimals)); // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ***
      expect(plan1.isActive).to.equal(true);
    });

    it("Should set default images for all plans", async function () {
      const { nft } = await loadFixture(deployFixture);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      for (let i = 1; i <= 16; i++) {
        const image = await nft.planDefaultImages(i);
        expect(image).to.not.equal(""); // ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      }
    });
  });

  describe("Plan Management", function () {
    it("Should create a new plan", async function () {
      const { nft, owner, decimals } = await loadFixture(deployFixture);

      const planPrice = ethers.parseUnits("20", decimals); // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ***
      const planName = "Premium Plan";
      const membersPerCycle = 4;

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÉ‡∏´‡∏°‡πà
      await nft.connect(owner).createPlan(planPrice, planName, membersPerCycle);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const newPlan = await nft.plans(17);
      expect(newPlan.price).to.equal(planPrice);
      expect(newPlan.name).to.equal(planName);
      expect(newPlan.membersPerCycle).to.equal(membersPerCycle);
      expect(newPlan.isActive).to.equal(true);
    });

    it("Should fail if plan price is lower than previous plan", async function () {
      const { nft, owner, decimals } = await loadFixture(deployFixture);

      const lowPrice = ethers.parseUnits("0.5", decimals); // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ***
      const planName = "Low Price Plan";
      const membersPerCycle = 4;

      // ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ
      await expect(
        nft.connect(owner).createPlan(lowPrice, planName, membersPerCycle)
      ).to.be.revertedWithCustomError(nft, "PriceTooLow");
    });

    it("Should fail if membersPerCycle is not 4", async function () {
      const { nft, owner, decimals } = await loadFixture(deployFixture);

      const planPrice = ethers.parseUnits("20", decimals); // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ***
      const planName = "Invalid Cycle";
      const invalidCycleMembers = 5;

      // ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ membersPerCycle ‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 4 ‡πÑ‡∏î‡πâ
      await expect(
        nft.connect(owner).createPlan(planPrice, planName, invalidCycleMembers)
      ).to.be.revertedWithCustomError(nft, "InvalidCycleMembers");
    });

    it("Should set plan default image", async function () {
      const { nft, owner } = await loadFixture(deployFixture);

      const planId = 1;
      const newImageURI = "ipfs://new-image-hash";

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
      await nft.connect(owner).setPlanDefaultImage(planId, newImageURI);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const image = await nft.planDefaultImages(planId);
      expect(image).to.equal(newImageURI);
    });

    it("Should set plan status", async function () {
      const { nft, owner } = await loadFixture(deployFixture);

      const planId = 1;

      // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ú‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      await nft.connect(owner).setPlanStatus(planId, false);
      const plan = await nft.plans(planId);
      expect(plan.isActive).to.equal(false);

      // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      await nft.connect(owner).setPlanStatus(planId, true);
      const updatedPlan = await nft.plans(planId);
      expect(updatedPlan.isActive).to.equal(true);
    });

    it("Should update members per cycle", async function () {
      const { nft, owner } = await loadFixture(deployFixture);

      const planId = 1;
      const membersPerCycle = 4;

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö
      await nft.connect(owner).updateMembersPerCycle(planId, membersPerCycle);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const plan = await nft.plans(planId);
      expect(plan.membersPerCycle).to.equal(membersPerCycle);
    });
  });

  describe("Member Registration", function () {
    it("Should register a new member with plan 1", async function () {
      const { nft, usdt, owner, user1, planPrices, decimals } = await loadFixture(deployFixture);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
      const balanceBefore = await usdt.balanceOf(user1.address);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ú‡∏ô 1
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö NFT
      expect(await nft.balanceOf(user1.address)).to.equal(1);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ USDT ‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const balanceAfter = await usdt.balanceOf(user1.address);
      expect(balanceBefore - balanceAfter).to.equal(planPrices[0]);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      const member = await nft.members(user1.address);
      expect(member.planId).to.equal(1);
      expect(member.upline).to.equal(owner.address);
    });

    it("Should register a member with upline", async function () {
      const { nft, owner, user1, user2 } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏£‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡∏£‡∏≠ 90 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô TooSoon error
      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏°‡∏µ upline ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏£‡∏Å
      await nft.connect(user2).registerMember(1, user1.address);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ upline ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const member = await nft.members(user2.address);
      expect(member.upline).to.equal(user1.address);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ upline ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
      const uplineMember = await nft.members(user1.address);
      expect(uplineMember.totalReferrals).to.equal(1);
    });

    it("Should fail if plan is not active", async function () {
      const { nft, owner, user1 } = await loadFixture(deployFixture);

      // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ú‡∏ô 1
      await nft.connect(owner).setPlanStatus(1, false);

      // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      await expect(
        nft.connect(user1).registerMember(1, owner.address)
      ).to.be.revertedWithCustomError(nft, "InactivePlan");
    });

    it("Should fail if already a member", async function () {
      const { nft, owner, user1 } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô TooSoon error
      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");

      // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ
      await expect(
        nft.connect(user1).registerMember(1, owner.address)
      ).to.be.revertedWithCustomError(nft, "AlreadyMember");
    });

    it("Should start a new cycle when current cycle is full", async function () {
      const { nft, owner, user1, user2, user3, user4, user5 } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å 4 ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡πÄ‡∏ï‡πá‡∏° ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      await nft.connect(user1).registerMember(1, owner.address);

      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");

      await nft.connect(user2).registerMember(1, user1.address);

      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");

      await nft.connect(user3).registerMember(1, user2.address);

      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");

      await nft.connect(user4).registerMember(1, user3.address);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô 1 ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
      const cycleInfo = await nft.getPlanCycleInfo(1);
      expect(cycleInfo[0]).to.equal(2n); // currentCycle
      expect(cycleInfo[1]).to.equal(0n); // membersInCurrentCycle

      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà 5
      await nft.connect(user5).registerMember(1, user4.address);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà 5 ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 2
      const member = await nft.members(user5.address);
      expect(member.cycleNumber).to.equal(2);
    });

    it("Should only allow registration in plan 1", async function () {
      const { nft, owner, user1 } = await loadFixture(deployFixture);

      // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏ú‡∏ô 1 ‡πÑ‡∏î‡πâ
      await expect(
        nft.connect(user1).registerMember(2, owner.address)
      ).to.be.revertedWithCustomError(nft, "Plan1Only");
    });
  });

  describe("Plan Upgrade - Basic Tests", function () {
    it("Should fail if trying to upgrade to invalid plan", async function () {
      const { nft, owner, user1 } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡∏£‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô TooSoon error
      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");

      // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÑ‡∏õ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ (‡πÅ‡∏ú‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤ 16)
      await expect(
        nft.connect(user1).upgradePlan(0)
      ).to.be.revertedWithCustomError(nft, "InvalidPlanID");

      await expect(
        nft.connect(user1).upgradePlan(20)
      ).to.be.revertedWithCustomError(nft, "InvalidPlanID");
    });
  });

  describe("Member Exit", function () {
    it("Should fail if try to exit before 30 days", async function () {
      const { nft, owner, user1 } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô 30 ‡∏ß‡∏±‡∏ô
      await expect(
        nft.connect(user1).exitMembership()
      ).to.be.revertedWithCustomError(nft, "ThirtyDayLock");
    });
  });

  describe("Funds Withdrawal", function () {
    it("Should withdraw owner balance", async function () {
      const { nft, usdt, owner, user1, decimals } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á owner
      const systemStats = await nft.getSystemStats();
      const ownerBalance = systemStats[3]; // ownerFunds

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏≠‡∏ô
      const balanceBefore = await usdt.balanceOf(owner.address);

      // ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡πÅ‡∏ô‡∏≠‡∏£‡πå
      await nft.connect(owner).withdrawOwnerBalance(ownerBalance);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const balanceAfter = await usdt.balanceOf(owner.address);
      expect(balanceAfter - balanceBefore).to.equal(ownerBalance);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô contract ‡∏•‡∏î‡∏•‡∏á
      const updatedSystemStats = await nft.getSystemStats();
      expect(updatedSystemStats[3]).to.equal(0); // ownerFunds
    });

    it("Should withdraw fee system balance", async function () {
      const { nft, usdt, owner, user1, decimals } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°
      const systemStats = await nft.getSystemStats();
      const feeBalance = systemStats[4]; // feeFunds

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏≠‡∏ô
      const balanceBefore = await usdt.balanceOf(owner.address);

      // ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°
      await nft.connect(owner).withdrawFeeSystemBalance(feeBalance);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const balanceAfter = await usdt.balanceOf(owner.address);
      expect(balanceAfter - balanceBefore).to.equal(feeBalance);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô contract ‡∏•‡∏î‡∏•‡∏á
      const updatedSystemStats = await nft.getSystemStats();
      expect(updatedSystemStats[4]).to.equal(0); // feeFunds
    });

    it("Should withdraw fund balance", async function () {
      const { nft, usdt, owner, user1, decimals } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô
      const systemStats = await nft.getSystemStats();
      const fundBalance = systemStats[5]; // fundFunds

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏≠‡∏ô
      const balanceBefore = await usdt.balanceOf(owner.address);

      // ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô
      await nft.connect(owner).withdrawFundBalance(fundBalance);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const balanceAfter = await usdt.balanceOf(owner.address);
      expect(balanceAfter - balanceBefore).to.equal(fundBalance);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô contract ‡∏•‡∏î‡∏•‡∏á
      const updatedSystemStats = await nft.getSystemStats();
      expect(updatedSystemStats[5]).to.equal(0); // fundFunds
    });

    it("Should perform batch withdrawal", async function () {
      const { nft, usdt, owner, user1, user2, decimals } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡∏£‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô TooSoon error
      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");

      await nft.connect(user2).registerMember(1, user1.address);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡πà‡∏≤‡∏á‡πÜ
      const systemStats = await nft.getSystemStats();
      const ownerBalance = systemStats[3]; // ownerFunds
      const feeBalance = systemStats[4]; // feeFunds
      const fundBalance = systemStats[5]; // fundFunds

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏≠‡∏ô
      const ownerBalanceBefore = await usdt.balanceOf(owner.address);
      const user1BalanceBefore = await usdt.balanceOf(user1.address);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á withdrawal requests
      const withdrawalRequests = [
        {
          recipient: owner.address,
          amount: ownerBalance / 2n,
          balanceType: 0 // owner
        },
        {
          recipient: user1.address,
          amount: feeBalance / 2n,
          balanceType: 1 // fee
        }
      ];

      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°
      await nft.connect(owner).batchWithdraw(withdrawalRequests);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const ownerBalanceAfter = await usdt.balanceOf(owner.address);
      const user1BalanceAfter = await usdt.balanceOf(user1.address);
      expect(ownerBalanceAfter - ownerBalanceBefore).to.equal(ownerBalance / 2n);
      expect(user1BalanceAfter - user1BalanceBefore).to.equal(feeBalance / 2n);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô contract ‡∏•‡∏î‡∏•‡∏á
      const updatedSystemStats = await nft.getSystemStats();
      expect(updatedSystemStats[3]).to.equal(ownerBalance / 2n); // ownerFunds
      expect(updatedSystemStats[4]).to.equal(feeBalance / 2n); // feeFunds
    });
  });

  describe("Emergency Functions", function () {
    it("Should request and perform emergency withdrawal", async function () {
      const { nft, usdt, owner, user1, user2, decimals } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡∏£‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô TooSoon error
      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");

      await nft.connect(user2).registerMember(1, user1.address);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏≠‡∏ô
      const balanceBefore = await usdt.balanceOf(owner.address);
      const contractBalance = await usdt.balanceOf(await nft.getAddress());

      // ‡∏Ç‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
      await nft.connect(owner).requestEmergencyWithdraw();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
      const contractStatus = await nft.getContractStatus();
      expect(contractStatus[4]).to.equal(true); // hasEmergencyRequest

      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ 2 ‡∏ß‡∏±‡∏ô (TIMELOCK_DURATION)
      await ethers.provider.send("evm_increaseTime", [2 * 24 * 60 * 60 + 1]);
      await ethers.provider.send("evm_mine");

      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
      await nft.connect(owner).emergencyWithdraw();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const balanceAfter = await usdt.balanceOf(owner.address);
      expect(balanceAfter - balanceBefore).to.equal(contractBalance);
      expect(await usdt.balanceOf(await nft.getAddress())).to.equal(0);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô 0
      const systemStats = await nft.getSystemStats();
      expect(systemStats[3]).to.equal(0); // ownerFunds
      expect(systemStats[4]).to.equal(0); // feeFunds
      expect(systemStats[5]).to.equal(0); // fundFunds
    });

    it("Should fail emergency withdrawal if timelock is active", async function () {
      const { nft, owner } = await loadFixture(deployFixture);

      // ‡∏Ç‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
      await nft.connect(owner).requestEmergencyWithdraw();

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
      await expect(
        nft.connect(owner).emergencyWithdraw()
      ).to.be.revertedWithCustomError(nft, "TimelockActive");
    });

    it("Should allow to cancel emergency withdrawal request", async function () {
      const { nft, owner } = await loadFixture(deployFixture);

      // ‡∏Ç‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
      await nft.connect(owner).requestEmergencyWithdraw();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
      let contractStatus = await nft.getContractStatus();
      expect(contractStatus[4]).to.equal(true); // hasEmergencyRequest

      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
      await nft.connect(owner).cancelEmergencyWithdraw();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
      contractStatus = await nft.getContractStatus();
      expect(contractStatus[4]).to.equal(false); // hasEmergencyRequest
    });

    it("Should pause and restart the contract", async function () {
      const { nft, owner, user1 } = await loadFixture(deployFixture);

      // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤
      await nft.connect(owner).setPaused(true);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î
      let contractStatus = await nft.getContractStatus();
      expect(contractStatus[0]).to.equal(true); // isPaused

      // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î
      await expect(
        nft.connect(user1).registerMember(1, owner.address)
      ).to.be.revertedWithCustomError(nft, "Paused");

      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏´‡∏°‡πà
      await nft.connect(owner).restartAfterPause();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      contractStatus = await nft.getContractStatus();
      expect(contractStatus[0]).to.equal(false); // isPaused

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
      await nft.connect(user1).registerMember(1, owner.address);
      expect(await nft.balanceOf(user1.address)).to.equal(1);
    });

    it("Should fail restarting if contract is not paused", async function () {
      const { nft, owner } = await loadFixture(deployFixture);

      // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î
      await expect(
        nft.connect(owner).restartAfterPause()
      ).to.be.revertedWithCustomError(nft, "NotPaused");
    });
  });

  describe("NFT Functionality", function () {
    it("Should prevent token transfers", async function () {
      const { nft, owner, user1, user2 } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô NFT ‡πÑ‡∏î‡πâ
      const tokenId = await nft.tokenOfOwnerByIndex(user1.address, 0);
      await expect(
        nft.connect(user1).transferFrom(user1.address, user2.address, tokenId)
      ).to.be.revertedWithCustomError(nft, "NonTransferable");
    });

    it("Should return token URI with correct format", async function () {
      const { nft, owner, user1 } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡∏î‡∏∂‡∏á tokenId
      const tokenId = await nft.tokenOfOwnerByIndex(user1.address, 0);

      // ‡∏î‡∏∂‡∏á token URI
      const uri = await nft.tokenURI(tokenId);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token URI ‡πÄ‡∏õ‡πá‡∏ô data URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      expect(uri).to.include("data:application/json;base64,");
    });

    it("Should set base URI successfully", async function () {
      const { nft, owner } = await loadFixture(deployFixture);

      const newBaseURI = "https://example.com/nft/";

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ base URI
      await nft.connect(owner).setBaseURI(newBaseURI);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ error
      // (‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å _baseURI ‡πÄ‡∏õ‡πá‡∏ô internal function ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
    });
  });

  describe("View Functions", function () {
    it("Should return correct plan cycle info", async function () {
      const { nft, owner, user1, user2 } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô TooSoon error
      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");

      await nft.connect(user2).registerMember(1, user1.address);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô 1
      const cycleInfo = await nft.getPlanCycleInfo(1);
      expect(cycleInfo[0]).to.equal(1n); // currentCycle
      expect(cycleInfo[1]).to.equal(2n); // membersInCurrentCycle
      expect(cycleInfo[2]).to.equal(4n); // membersPerCycle
    });

    it("Should return correct system stats", async function () {
      const { nft, owner, user1, user2, decimals } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤
      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");

      await nft.connect(user2).registerMember(1, user1.address);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
      const stats = await nft.getSystemStats();
      expect(stats[0]).to.equal(2n); // totalMembers
      expect(stats[1]).to.be.gt(0n); // totalRevenue
      expect(stats[2]).to.be.gt(0n); // totalCommission
      expect(stats[3]).to.be.gt(0n); // ownerFunds
      expect(stats[4]).to.be.gt(0n); // feeFunds
      expect(stats[5]).to.be.gt(0n); // fundFunds
    });

    it("Should return correct contract status", async function () {
      const { nft, owner, user1 } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤
      const status = await nft.getContractStatus();
      expect(status[0]).to.equal(false); // isPaused
      expect(status[1]).to.be.gt(0n); // totalBalance
      expect(status[2]).to.equal(1n); // memberCount
      expect(status[3]).to.equal(16n); // currentPlanCount
      expect(status[4]).to.equal(false); // hasEmergencyRequest
      expect(status[5]).to.equal(0n); // emergencyTimeRemaining
    });

    it("Should return correct NFT image data", async function () {
      const { nft, owner, user1 } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡∏î‡∏∂‡∏á tokenId
      const tokenId = await nft.tokenOfOwnerByIndex(user1.address, 0);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û NFT
      const imageData = await nft.getNFTImage(tokenId);
      expect(imageData.name).to.equal("1");
      expect(imageData.description).to.include("Crypto Membership NFT");
      expect(imageData.planId).to.equal(1n);
      expect(imageData.createdAt).to.be.gt(0n);
    });

    it("Should validate contract balance correctly", async function () {
      const { nft, owner, user1 } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô
      const validation = await nft.validateContractBalance();
      expect(validation[0]).to.equal(true); // ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô contract ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
      expect(validation[1]).to.be.gt(0n); // expectedBalance
      expect(validation[2]).to.be.gt(0n); // actualBalance
    });
  });

  describe("Edge Cases and Security", function () {
    it("Should handle edge case with zero address checks", async function () {
      const { nft, user1 } = await loadFixture(deployFixture);

      // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏î‡πâ‡∏ß‡∏¢ upline ‡πÄ‡∏õ‡πá‡∏ô address 0 ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      await expect(
        nft.connect(user1).registerMember(1, ethers.ZeroAddress)
      ).to.be.revertedWithCustomError(nft, "ZeroAddress");
    });

    it("Should prevent front-running attacks with cooldown", async function () {
      const { nft, owner, user1 } = await loadFixture(deployFixture);

      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      await nft.connect(user1).registerMember(1, owner.address);

      // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô cooldown
      await ethers.provider.send("evm_increaseTime", [90]);
      await ethers.provider.send("evm_mine");

      // ‡∏Ñ‡∏ß‡∏£‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏≠‡∏µ‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£
    });

    it("Should prevent setting invalid values", async function () {
      const { nft, owner, decimals } = await loadFixture(deployFixture);

      // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ plan ID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ
      await expect(
        nft.connect(owner).setPlanStatus(0, true)
      ).to.be.revertedWithCustomError(nft, "InvalidPlanID");

      await expect(
        nft.connect(owner).setPlanStatus(17, true)
      ).to.be.revertedWithCustomError(nft, "InvalidPlanID");

      // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ image URI ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ
      await expect(
        nft.connect(owner).setPlanDefaultImage(1, "")
      ).to.be.revertedWithCustomError(nft, "EmptyURI");

      // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ base URI ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ
      await expect(
        nft.connect(owner).setBaseURI("")
      ).to.be.revertedWithCustomError(nft, "EmptyURI");
    });

    it("Should prevent unauthorized access to owner-only functions", async function () {
      const { nft, user1, decimals } = await loadFixture(deployFixture);

      // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏î‡πâ
      await expect(
        nft.connect(user1).setPaused(true)
      ).to.be.revertedWithCustomError(nft, "OwnableUnauthorizedAccount");

      await expect(
        nft.connect(user1).createPlan(ethers.parseUnits("20", decimals), "Test", 4)
      ).to.be.revertedWithCustomError(nft, "OwnableUnauthorizedAccount");

      await expect(
        nft.connect(user1).withdrawOwnerBalance(1)
      ).to.be.revertedWithCustomError(nft, "OwnableUnauthorizedAccount");
    });

    it("Should validate balance before withdrawal", async function () {
      const { nft, owner, decimals } = await loadFixture(deployFixture);

      // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ
      await expect(
        nft.connect(owner).withdrawOwnerBalance(ethers.parseUnits("100", decimals))
      ).to.be.revertedWithCustomError(nft, "LowOwnerBalance");

      await expect(
        nft.connect(owner).withdrawFeeSystemBalance(ethers.parseUnits("100", decimals))
      ).to.be.revertedWithCustomError(nft, "LowFeeBalance");

      await expect(
        nft.connect(owner).withdrawFundBalance(ethers.parseUnits("100", decimals))
      ).to.be.revertedWithCustomError(nft, "LowFundBalance");
    });

    // Event Tests
    describe("Missing Event Tests", function () {
      it("Should emit PriceFeedUpdated event", async function () {
        const { nft, owner } = await loadFixture(deployFixture);
        const newPriceFeed = "0x1234567890123456789012345678901234567890";

        await expect(nft.connect(owner).setPriceFeed(newPriceFeed))
          .to.emit(nft, "PriceFeedUpdated")
          .withArgs(newPriceFeed);
      });

      it("Should emit MembershipMinted event with correct data", async function () {
        const { nft, owner, user1 } = await loadFixture(deployFixture);

        await expect(nft.connect(user1).registerMember(1, owner.address))
          .to.emit(nft, "MembershipMinted")
          .withArgs(user1.address, 0, "Non-transferable");
      });
    });
  });
});