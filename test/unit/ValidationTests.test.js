// test/unit/ValidationTests.test.js
const { expect } = require("chai");
const { ethers } = require("hardhat");
const { loadFixture } = require("@nomicfoundation/hardhat-network-helpers");

describe("Input Validation Tests", function () {
  // *** ‡πÄ‡∏û‡∏¥‡πà‡∏° deployFixture function ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ***
  async function deployFixture() {
    const [owner, user1, user2] = await ethers.getSigners();

    // Deploy FakeUSDT
    const FakeUSDT = await ethers.getContractFactory("FakeUSDT");
    const usdt = await FakeUSDT.deploy();
    await usdt.waitForDeployment();

    // Deploy CryptoMembershipNFT
    const CryptoMembershipNFT = await ethers.getContractFactory(
      "CryptoMembershipNFT"
    );
    const nft = await CryptoMembershipNFT.deploy(
      await usdt.getAddress(),
      owner.address
    );
    await nft.waitForDeployment();

    // *** ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö decimals ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ ***
    const decimals = await usdt.decimals();
    console.log(`üí∞ USDT decimals: ${decimals}`);

    // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ parseUnits ‡πÅ‡∏ó‡∏ô parseEther ***
    const initialAmount = ethers.parseUnits("100", decimals);

    // ‡πÅ‡∏à‡∏Å USDT ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    for (const user of [user1, user2]) {
      await usdt.transfer(user.address, initialAmount);
      await usdt.connect(user).approve(await nft.getAddress(), initialAmount);
    }

    return { nft, usdt, owner, user1, user2, decimals };
  }

  it("Should validate all input parameters thoroughly", async function () {
    const { nft, owner, decimals } = await loadFixture(deployFixture);

    console.log("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Input Parameters ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î...");

    // Test plan creation with boundary values
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö createPlan ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤ 0...");
    await expect(
      nft.connect(owner).createPlan(0, "Zero Price", 4)
    ).to.be.revertedWithCustomError(nft, "ZeroPrice");
    console.log("‚úÖ ZeroPrice validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö createPlan ‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏á...");
    await expect(
      nft.connect(owner).createPlan(ethers.parseUnits("1", decimals), "", 4)
    ).to.be.revertedWithCustomError(nft, "EmptyName");
    console.log("‚úÖ EmptyName validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö createPlan ‡∏î‡πâ‡∏ß‡∏¢ invalid cycle members...");
    await expect(
      nft
        .connect(owner)
        .createPlan(ethers.parseUnits("1", decimals), "Invalid Cycle", 5)
    ).to.be.revertedWithCustomError(nft, "InvalidCycleMembers");
    console.log("‚úÖ InvalidCycleMembers validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test with extreme values that should work
    console.log("üí∞ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö createPlan ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å...");
    const extremelyHighPrice = ethers.parseUnits("1000000", decimals); // 1M USDT
    await nft
      .connect(owner)
      .createPlan(extremelyHighPrice, "Extremely High Price", 4);

    const plan = await nft.plans(17); // Should be the new plan (default 16 plans + 1)
    expect(plan.price).to.equal(extremelyHighPrice);
    expect(plan.name).to.equal("Extremely High Price");
    expect(plan.isActive).to.equal(true);
    console.log(
      `‚úÖ High price plan created: ${ethers.formatUnits(
        plan.price,
        decimals
      )} USDT`
    );

    // Test setPlanDefaultImage validation
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö setPlanDefaultImage ‡∏î‡πâ‡∏ß‡∏¢ empty URI...");
    await expect(
      nft.connect(owner).setPlanDefaultImage(1, "")
    ).to.be.revertedWithCustomError(nft, "EmptyURI");
    console.log("‚úÖ EmptyURI validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö setPlanDefaultImage ‡∏î‡πâ‡∏ß‡∏¢ invalid plan ID...");
    await expect(
      nft.connect(owner).setPlanDefaultImage(0, "test-uri")
    ).to.be.revertedWithCustomError(nft, "InvalidPlanID");
    console.log("‚úÖ InvalidPlanID validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test valid setPlanDefaultImage
    console.log("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö setPlanDefaultImage ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á...");
    const validImageURI = "ipfs://QmNewImageHash";
    await nft.connect(owner).setPlanDefaultImage(1, validImageURI);
    const imageURI = await nft.planDefaultImages(1);
    expect(imageURI).to.equal(validImageURI);
    console.log("‚úÖ Valid setPlanDefaultImage ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test setBaseURI validation
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö setBaseURI ‡∏î‡πâ‡∏ß‡∏¢ empty string...");
    await expect(
      nft.connect(owner).setBaseURI("")
    ).to.be.revertedWithCustomError(nft, "EmptyURI");
    console.log("‚úÖ setBaseURI EmptyURI validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test valid setBaseURI
    console.log("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö setBaseURI ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á...");
    const validBaseURI = "https://api.example.com/metadata/";
    await nft.connect(owner).setBaseURI(validBaseURI);
    console.log("‚úÖ Valid setBaseURI ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test address validation
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö setPriceFeed ‡∏î‡πâ‡∏ß‡∏¢ zero address...");
    await expect(
      nft.connect(owner).setPriceFeed(ethers.ZeroAddress)
    ).to.be.revertedWithCustomError(nft, "ZeroAddress");
    console.log("‚úÖ ZeroAddress validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test valid setPriceFeed
    console.log("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö setPriceFeed ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á...");
    const validPriceFeed = "0x1234567890123456789012345678901234567890";
    await nft.connect(owner).setPriceFeed(validPriceFeed);
    console.log("‚úÖ Valid setPriceFeed ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test plan status validation
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö setPlanStatus ‡∏î‡πâ‡∏ß‡∏¢ invalid plan ID...");
    await expect(
      nft.connect(owner).setPlanStatus(100, true)
    ).to.be.revertedWithCustomError(nft, "InvalidPlanID");
    console.log("‚úÖ setPlanStatus InvalidPlanID validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test valid setPlanStatus
    console.log("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö setPlanStatus ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á...");
    await nft.connect(owner).setPlanStatus(1, false);
    let plan1 = await nft.plans(1);
    expect(plan1.isActive).to.equal(false);

    await nft.connect(owner).setPlanStatus(1, true);
    plan1 = await nft.plans(1);
    expect(plan1.isActive).to.equal(true);
    console.log("‚úÖ Valid setPlanStatus ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    console.log("üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Input Validation ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
  });

  it("Should validate withdrawal parameters", async function () {
    const { nft, owner, user1, decimals } = await loadFixture(deployFixture);

    console.log("üí∏ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parameters ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô...");

    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    await nft.connect(user1).registerMember(1, owner.address);

    // Test withdrawal amount validation
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö withdrawOwnerBalance ‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠...");
    const excessAmount = ethers.parseUnits("1000", decimals);
    await expect(
      nft.connect(owner).withdrawOwnerBalance(excessAmount)
    ).to.be.revertedWithCustomError(nft, "LowOwnerBalance");
    console.log("‚úÖ LowOwnerBalance validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö withdrawFeeSystemBalance ‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠...");
    await expect(
      nft.connect(owner).withdrawFeeSystemBalance(excessAmount)
    ).to.be.revertedWithCustomError(nft, "LowFeeBalance");
    console.log("‚úÖ LowFeeBalance validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö withdrawFundBalance ‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠...");
    await expect(
      nft.connect(owner).withdrawFundBalance(excessAmount)
    ).to.be.revertedWithCustomError(nft, "LowFundBalance");
    console.log("‚úÖ LowFundBalance validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test valid withdrawal
    const systemStats = await nft.getSystemStats();
    const ownerBalance = systemStats[3];

    if (ownerBalance > 0n) {
      console.log(
        `‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö withdrawal ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${ethers.formatUnits(
          ownerBalance,
          decimals
        )} USDT`
      );
      await nft.connect(owner).withdrawOwnerBalance(ownerBalance);
      console.log("‚úÖ Valid withdrawal ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
    }
  });

  it("Should validate batch withdrawal parameters", async function () {
    const { nft, owner, user1, decimals } = await loadFixture(deployFixture);

    console.log("üì¶ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parameters ‡∏Ç‡∏≠‡∏á batch withdrawal...");

    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    await nft.connect(user1).registerMember(1, owner.address);

    // Test empty requests array
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö batchWithdraw ‡∏î‡πâ‡∏ß‡∏¢ empty array...");
    await expect(
      nft.connect(owner).batchWithdraw([])
    ).to.be.revertedWithCustomError(nft, "InvalidRequests");
    console.log("‚úÖ Empty array validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test too many requests
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö batchWithdraw ‡∏î‡πâ‡∏ß‡∏¢ requests ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ...");
    const tooManyRequests = Array(21).fill({
      recipient: owner.address,
      amount: 1,
      balanceType: 0,
    });

    await expect(
      nft.connect(owner).batchWithdraw(tooManyRequests)
    ).to.be.revertedWithCustomError(nft, "InvalidRequests");
    console.log("‚úÖ Too many requests validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test invalid recipient (zero address)
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö batchWithdraw ‡∏î‡πâ‡∏ß‡∏¢ zero address recipient...");
    const invalidRequests = [
      {
        recipient: ethers.ZeroAddress,
        amount: ethers.parseUnits("1", decimals),
        balanceType: 0,
      },
    ];

    await expect(
      nft.connect(owner).batchWithdraw(invalidRequests)
    ).to.be.revertedWithCustomError(nft, "InvalidRequest");
    console.log("‚úÖ Zero address recipient validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test invalid amount (zero)
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö batchWithdraw ‡∏î‡πâ‡∏ß‡∏¢ zero amount...");
    const zeroAmountRequests = [
      {
        recipient: owner.address,
        amount: 0,
        balanceType: 0,
      },
    ];

    await expect(
      nft.connect(owner).batchWithdraw(zeroAmountRequests)
    ).to.be.revertedWithCustomError(nft, "InvalidRequest");
    console.log("‚úÖ Zero amount validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test valid batch withdrawal
    const systemStats = await nft.getSystemStats();
    const ownerBalance = systemStats[3];

    if (ownerBalance > 0n) {
      console.log("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö batch withdrawal ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á...");
      const validRequests = [
        {
          recipient: owner.address,
          amount: ownerBalance / 2n,
          balanceType: 0,
        },
      ];

      await nft.connect(owner).batchWithdraw(validRequests);
      console.log("‚úÖ Valid batch withdrawal ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
    }
  });

  it("Should validate plan upgrade parameters", async function () {
    const { nft, owner, user1 } = await loadFixture(deployFixture);

    console.log("‚¨ÜÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parameters ‡∏Ç‡∏≠‡∏á plan upgrade...");

    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    await nft.connect(user1).registerMember(1, owner.address);

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô preventFrontRunning ‡∏Å‡πà‡∏≠‡∏ô
    console.log("‚è∞ ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô preventFrontRunning...");
    await ethers.provider.send("evm_increaseTime", [90]);
    await ethers.provider.send("evm_mine");

    // Test invalid plan ID (0)
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö upgradePlan ‡∏î‡πâ‡∏ß‡∏¢ plan ID 0...");
    await expect(
      nft.connect(user1).upgradePlan(0)
    ).to.be.revertedWithCustomError(nft, "InvalidPlanID");
    console.log("‚úÖ Plan ID 0 validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test invalid plan ID (‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ú‡∏ô)
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö invalid plan ID ‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ú‡∏ô...");
    await expect(
      nft.connect(user1).upgradePlan(100)
    ).to.be.revertedWithCustomError(nft, "InvalidPlanID");
    console.log("‚úÖ Excessive plan ID validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test inactive plan - ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö upgradePlan ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...");
    await nft.connect(owner).setPlanStatus(2, false); // ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏ô 2

    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö upgradePlan ‡πÉ‡∏´‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö registerMember ‡∏Å‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î
    // (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ upgradePlan ‡∏à‡∏∞‡∏ï‡∏¥‡∏î TooSoon ‡∏´‡∏£‡∏∑‡∏≠ CooldownActive ‡∏Å‡πà‡∏≠‡∏ô)
    await expect(
      nft.connect(owner).registerMember(2, owner.address) // owner ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÅ‡∏ú‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ
    ).to.be.revertedWithCustomError(nft, "InactivePlan");

    // ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏ô‡∏Å‡∏•‡∏±‡∏ö
    await nft.connect(owner).setPlanStatus(2, true);
    console.log("‚úÖ InactivePlan validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
  });

  it("Should validate registration parameters", async function () {
    const { nft, owner, user1, user2, user3 } = await loadFixture(
      deployFixture
    );

    console.log("üìù ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parameters ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô...");

    // Test zero address upline
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö registerMember ‡∏î‡πâ‡∏ß‡∏¢ zero address upline...");
    await expect(
      nft.connect(user1).registerMember(1, ethers.ZeroAddress)
    ).to.be.revertedWithCustomError(nft, "ZeroAddress");
    console.log("‚úÖ Zero address upline validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test invalid plan (not plan 1)
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö registerMember ‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏ú‡∏ô 1...");
    await expect(
      nft.connect(user1).registerMember(2, owner.address)
    ).to.be.revertedWithCustomError(nft, "Plan1Only");
    console.log("‚úÖ Plan1Only validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test invalid plan ID - ‡πÉ‡∏ä‡πâ owner ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏ú‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö registerMember ‡∏î‡πâ‡∏ß‡∏¢ invalid plan ID (plan 0)...");
    await expect(
      nft.connect(owner).registerMember(0, owner.address) // owner ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÅ‡∏ú‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ
    ).to.be.revertedWithCustomError(nft, "InvalidPlanID");
    console.log("‚úÖ InvalidPlanID validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö registerMember ‡∏î‡πâ‡∏ß‡∏¢ excessive plan ID...");
    await expect(
      nft.connect(owner).registerMember(100, owner.address) // owner ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÅ‡∏ú‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ
    ).to.be.revertedWithCustomError(nft, "InvalidPlanID");
    console.log("‚úÖ Excessive plan ID validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test inactive plan
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö registerMember ‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...");
    await nft.connect(owner).setPlanStatus(1, false); // ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏ô 1

    await expect(
      nft.connect(user1).registerMember(1, owner.address)
    ).to.be.revertedWithCustomError(nft, "InactivePlan");
    console.log("‚úÖ InactivePlan validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≠
    await nft.connect(owner).setPlanStatus(1, true);

    // Test valid registration
    console.log("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö registerMember ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á...");
    await nft.connect(user1).registerMember(1, owner.address);

    const member = await nft.members(user1.address);
    expect(member.planId).to.equal(1);
    expect(member.upline).to.equal(owner.address);
    console.log("‚úÖ Valid registration ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test already member
    await ethers.provider.send("evm_increaseTime", [90]);
    await ethers.provider.send("evm_mine");

    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö registerMember ‡∏ã‡πâ‡∏≥...");
    await expect(
      nft.connect(user1).registerMember(1, owner.address)
    ).to.be.revertedWithCustomError(nft, "AlreadyMember");
    console.log("‚úÖ AlreadyMember validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

    // Test upline not member - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ user3 ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    console.log("üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö registerMember ‡∏î‡πâ‡∏ß‡∏¢ upline ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å...");

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ user3 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    const user3Balance = await nft.balanceOf(user3.address);
    expect(user3Balance).to.equal(0); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ NFT

    await expect(
      nft.connect(user2).registerMember(1, user3.address)
    ).to.be.revertedWithCustomError(nft, "UplineNotMember");
    console.log("‚úÖ UplineNotMember validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
  });
});
